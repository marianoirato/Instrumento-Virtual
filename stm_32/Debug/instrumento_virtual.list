
instrumento_virtual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006094  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006254  08006254  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006254  08006254  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006254  08006254  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006254  08006254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800625c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000204  20000204  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012b38  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000278a  00000000  00000000  00032bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001008  00000000  00000000  00035348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c92  00000000  00000000  00036350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021787  00000000  00000000  00036fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014675  00000000  00000000  00058769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc2fe  00000000  00000000  0006cdde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000043d0  00000000  00000000  001390dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  0013d4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006204 	.word	0x08006204

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006204 	.word	0x08006204

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 ff8e 	bl	80010ec <HAL_Init>

  /* USER CODE BEGIN Init */
  GPIOB->ODR=4096;
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <main+0x58>)
 80001d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001d6:	615a      	str	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f82e 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f9d6 	bl	800058c <MX_GPIO_Init>
  MX_DMA_Init();
 80001e0:	f000 f9b6 	bl	8000550 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f97c 	bl	80004e0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80001e8:	f000 f944 	bl	8000474 <MX_TIM6_Init>
  MX_ADC1_Init();
 80001ec:	f000 f87e 	bl	80002ec <MX_ADC1_Init>
  MX_DAC2_Init();
 80001f0:	f000 f916 	bl	8000420 <MX_DAC2_Init>
  MX_DAC1_Init();
 80001f4:	f000 f8ea 	bl	80003cc <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  /******Enable timers**********/
 HAL_TIM_Base_Start_IT(&htim6);
 80001f8:	480a      	ldr	r0, [pc, #40]	; (8000224 <main+0x5c>)
 80001fa:	f004 fa4f 	bl	800469c <HAL_TIM_Base_Start_IT>
 HAL_UART_Receive_IT(&huart2, uart_rx_buffer,rx_buffer_size);
 80001fe:	2207      	movs	r2, #7
 8000200:	4909      	ldr	r1, [pc, #36]	; (8000228 <main+0x60>)
 8000202:	480a      	ldr	r0, [pc, #40]	; (800022c <main+0x64>)
 8000204:	f004 fd40 	bl	8004c88 <HAL_UART_Receive_IT>
 SystemCoreClockUpdate();
 8000208:	f000 fed6 	bl	8000fb8 <SystemCoreClockUpdate>
 HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800020c:	2100      	movs	r1, #0
 800020e:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0x68>)
 8000210:	f002 f992 	bl	8002538 <HAL_DAC_Start>
 HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000214:	2100      	movs	r1, #0
 8000216:	4807      	ldr	r0, [pc, #28]	; (8000234 <main+0x6c>)
 8000218:	f002 f98e 	bl	8002538 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x54>
 800021e:	bf00      	nop
 8000220:	48000400 	.word	0x48000400
 8000224:	200000a0 	.word	0x200000a0
 8000228:	200001e0 	.word	0x200001e0
 800022c:	200000ec 	.word	0x200000ec
 8000230:	20000078 	.word	0x20000078
 8000234:	2000008c 	.word	0x2000008c

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b096      	sub	sp, #88	; 0x58
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f005 ffaf 	bl	80061aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 031c 	add.w	r3, r7, #28
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	463b      	mov	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]
 800026a:	615a      	str	r2, [r3, #20]
 800026c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	2302      	movs	r3, #2
 8000270:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	2310      	movs	r3, #16
 8000278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027e:	2300      	movs	r3, #0
 8000280:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000282:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000286:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028c:	4618      	mov	r0, r3
 800028e:	f002 fe03 	bl	8002e98 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000298:	f000 fcbc 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	f107 031c 	add.w	r3, r7, #28
 80002b6:	2102      	movs	r1, #2
 80002b8:	4618      	mov	r0, r3
 80002ba:	f003 fe2b 	bl	8003f14 <HAL_RCC_ClockConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002c4:	f000 fca6 	bl	8000c14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d2:	463b      	mov	r3, r7
 80002d4:	4618      	mov	r0, r3
 80002d6:	f004 f853 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002e0:	f000 fc98 	bl	8000c14 <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3758      	adds	r7, #88	; 0x58
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002f2:	f107 031c 	add.w	r3, r7, #28
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
 800030c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800030e:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000310:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000314:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800031c:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000322:	4b29      	ldr	r3, [pc, #164]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000328:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800032a:	2200      	movs	r2, #0
 800032c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032e:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000330:	2200      	movs	r2, #0
 8000332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000338:	2200      	movs	r2, #0
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033c:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800033e:	2201      	movs	r2, #1
 8000340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000342:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800034a:	2201      	movs	r2, #1
 800034c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800034e:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000350:	2200      	movs	r2, #0
 8000352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000356:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000358:	2204      	movs	r2, #4
 800035a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800035e:	2200      	movs	r2, #0
 8000360:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000362:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000364:	2200      	movs	r2, #0
 8000366:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000368:	4817      	ldr	r0, [pc, #92]	; (80003c8 <MX_ADC1_Init+0xdc>)
 800036a:	f000 ff25 	bl	80011b8 <HAL_ADC_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000374:	f000 fc4e 	bl	8000c14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800037c:	f107 031c 	add.w	r3, r7, #28
 8000380:	4619      	mov	r1, r3
 8000382:	4811      	ldr	r0, [pc, #68]	; (80003c8 <MX_ADC1_Init+0xdc>)
 8000384:	f001 fd30 	bl	8001de8 <HAL_ADCEx_MultiModeConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800038e:	f000 fc41 	bl	8000c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000392:	2301      	movs	r3, #1
 8000394:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000396:	2301      	movs	r3, #1
 8000398:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800039e:	2307      	movs	r3, #7
 80003a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	4806      	ldr	r0, [pc, #24]	; (80003c8 <MX_ADC1_Init+0xdc>)
 80003b0:	f001 fa5c 	bl	800186c <HAL_ADC_ConfigChannel>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003ba:	f000 fc2b 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	3728      	adds	r7, #40	; 0x28
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000028 	.word	0x20000028

080003cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003dc:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_DAC1_Init+0x4c>)
 80003de:	4a0f      	ldr	r2, [pc, #60]	; (800041c <MX_DAC1_Init+0x50>)
 80003e0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003e2:	480d      	ldr	r0, [pc, #52]	; (8000418 <MX_DAC1_Init+0x4c>)
 80003e4:	f002 f857 	bl	8002496 <HAL_DAC_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80003ee:	f000 fc11 	bl	8000c14 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	4619      	mov	r1, r3
 8000400:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_DAC1_Init+0x4c>)
 8000402:	f002 f93f 	bl	8002684 <HAL_DAC_ConfigChannel>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 800040c:	f000 fc02 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000078 	.word	0x20000078
 800041c:	40007400 	.word	0x40007400

08000420 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_DAC2_Init+0x4c>)
 8000432:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <MX_DAC2_Init+0x50>)
 8000434:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000436:	480d      	ldr	r0, [pc, #52]	; (800046c <MX_DAC2_Init+0x4c>)
 8000438:	f002 f82d 	bl	8002496 <HAL_DAC_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 8000442:	f000 fbe7 	bl	8000c14 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 800044a:	2302      	movs	r3, #2
 800044c:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2200      	movs	r2, #0
 8000452:	4619      	mov	r1, r3
 8000454:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_DAC2_Init+0x4c>)
 8000456:	f002 f915 	bl	8002684 <HAL_DAC_ConfigChannel>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 8000460:	f000 fbd8 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000008c 	.word	0x2000008c
 8000470:	40009800 	.word	0x40009800

08000474 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_TIM6_Init+0x64>)
 8000486:	4a15      	ldr	r2, [pc, #84]	; (80004dc <MX_TIM6_Init+0x68>)
 8000488:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_TIM6_Init+0x64>)
 800048c:	2201      	movs	r2, #1
 800048e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_TIM6_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64000;
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_TIM6_Init+0x64>)
 8000498:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800049c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_TIM6_Init+0x64>)
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <MX_TIM6_Init+0x64>)
 80004a6:	f004 f8a1 	bl	80045ec <HAL_TIM_Base_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80004b0:	f000 fbb0 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	4619      	mov	r1, r3
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_TIM6_Init+0x64>)
 80004c2:	f004 fb07 	bl	8004ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80004cc:	f000 fba2 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000a0 	.word	0x200000a0
 80004dc:	40001000 	.word	0x40001000

080004e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <MX_USART2_UART_Init+0x68>)
 80004e6:	4a19      	ldr	r2, [pc, #100]	; (800054c <MX_USART2_UART_Init+0x6c>)
 80004e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <MX_USART2_UART_Init+0x68>)
 80004ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <MX_USART2_UART_Init+0x68>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <MX_USART2_UART_Init+0x68>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_USART2_UART_Init+0x68>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <MX_USART2_UART_Init+0x68>)
 8000506:	220c      	movs	r2, #12
 8000508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_USART2_UART_Init+0x68>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <MX_USART2_UART_Init+0x68>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_USART2_UART_Init+0x68>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <MX_USART2_UART_Init+0x68>)
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000522:	4809      	ldr	r0, [pc, #36]	; (8000548 <MX_USART2_UART_Init+0x68>)
 8000524:	f004 fb62 	bl	8004bec <HAL_UART_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800052e:	f000 fb71 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	2026      	movs	r0, #38	; 0x26
 8000538:	f001 ff77 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800053c:	2026      	movs	r0, #38	; 0x26
 800053e:	f001 ff90 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000ec 	.word	0x200000ec
 800054c:	40004400 	.word	0x40004400

08000550 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_DMA_Init+0x38>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <MX_DMA_Init+0x38>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_DMA_Init+0x38>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	2011      	movs	r0, #17
 8000574:	f001 ff59 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000578:	2011      	movs	r0, #17
 800057a:	f001 ff72 	bl	8002462 <HAL_NVIC_EnableIRQ>

}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b54      	ldr	r3, [pc, #336]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a53      	ldr	r2, [pc, #332]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b51      	ldr	r3, [pc, #324]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ba:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a4d      	ldr	r2, [pc, #308]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b4b      	ldr	r3, [pc, #300]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b48      	ldr	r3, [pc, #288]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a47      	ldr	r2, [pc, #284]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b45      	ldr	r3, [pc, #276]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b42      	ldr	r3, [pc, #264]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a41      	ldr	r2, [pc, #260]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b3f      	ldr	r3, [pc, #252]	; (80006f4 <MX_GPIO_Init+0x168>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DO_5_Pin|DO_6_Pin|DO_1_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060c:	f002 fc2c 	bl	8002e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO_4_Pin|sel_0_Pin|sel_1_Pin|sel_2_Pin
 8000610:	2200      	movs	r2, #0
 8000612:	f24e 4170 	movw	r1, #58480	; 0xe470
 8000616:	4838      	ldr	r0, [pc, #224]	; (80006f8 <MX_GPIO_Init+0x16c>)
 8000618:	f002 fc26 	bl	8002e68 <HAL_GPIO_WritePin>
                          |DO_3_Pin|DO_2_Pin|DO_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO_7_GPIO_Port, DO_7_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	4836      	ldr	r0, [pc, #216]	; (80006fc <MX_GPIO_Init+0x170>)
 8000622:	f002 fc21 	bl	8002e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	482f      	ldr	r0, [pc, #188]	; (80006fc <MX_GPIO_Init+0x170>)
 800063e:	f002 faa1 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DO_5_Pin DO_6_Pin DO_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DO_5_Pin|DO_6_Pin|DO_1_Pin;
 8000642:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f002 fa91 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_6_Pin DI_7_Pin DI_8_Pin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 8000662:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4821      	ldr	r0, [pc, #132]	; (80006fc <MX_GPIO_Init+0x170>)
 8000678:	f002 fa84 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_1_Pin DI_2_Pin DI_3_Pin */
  GPIO_InitStruct.Pin = DI_1_Pin|DI_2_Pin|DI_3_Pin;
 800067c:	f641 0304 	movw	r3, #6148	; 0x1804
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000686:	2302      	movs	r3, #2
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4819      	ldr	r0, [pc, #100]	; (80006f8 <MX_GPIO_Init+0x16c>)
 8000692:	f002 fa77 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_4_Pin sel_0_Pin sel_1_Pin sel_2_Pin
                           DO_3_Pin DO_2_Pin DO_8_Pin */
  GPIO_InitStruct.Pin = DO_4_Pin|sel_0_Pin|sel_1_Pin|sel_2_Pin
 8000696:	f24e 4370 	movw	r3, #58480	; 0xe470
 800069a:	617b      	str	r3, [r7, #20]
                          |DO_3_Pin|DO_2_Pin|DO_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4812      	ldr	r0, [pc, #72]	; (80006f8 <MX_GPIO_Init+0x16c>)
 80006b0:	f002 fa68 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DO_7_Pin */
  GPIO_InitStruct.Pin = DO_7_Pin;
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DO_7_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	480c      	ldr	r0, [pc, #48]	; (80006fc <MX_GPIO_Init+0x170>)
 80006cc:	f002 fa5a 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_4_Pin DI_5_Pin */
  GPIO_InitStruct.Pin = DI_4_Pin|DI_5_Pin;
 80006d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006da:	2302      	movs	r3, #2
 80006dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f002 fa4c 	bl	8002b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	; 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000400 	.word	0x48000400
 80006fc:	48000800 	.word	0x48000800

08000700 <digital_read>:

/* this function implements a vector with 8 digital inputs and return it like 8 bit int
 * PB2, PB11, PB12, PA11, PA12, PC5, PC6, PC8 are the inputs where PB2 is the lsb
 *
 * */
uint8_t digital_read() {
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
    uint8_t inputVector = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOB->IDR & GPIO_IDR_2) ? (1 << 0) : 0; //this sentence read directly from the reg of each gpio
 800070a:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <digital_read+0xf8>)
 800070c:	691b      	ldr	r3, [r3, #16]
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf14      	ite	ne
 8000716:	2301      	movne	r3, #1
 8000718:	2300      	moveq	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	b25a      	sxtb	r2, r3
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	4313      	orrs	r3, r2
 8000724:	b25b      	sxtb	r3, r3
 8000726:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOB->IDR & GPIO_IDR_11) ? (1 << 1) : 0;
 8000728:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <digital_read+0xf8>)
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <digital_read+0x38>
 8000734:	2302      	movs	r3, #2
 8000736:	e000      	b.n	800073a <digital_read+0x3a>
 8000738:	2300      	movs	r3, #0
 800073a:	b25a      	sxtb	r2, r3
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	4313      	orrs	r3, r2
 8000742:	b25b      	sxtb	r3, r3
 8000744:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOB->IDR & GPIO_IDR_12) ? (1 << 2) : 0;
 8000746:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <digital_read+0xf8>)
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <digital_read+0x56>
 8000752:	2304      	movs	r3, #4
 8000754:	e000      	b.n	8000758 <digital_read+0x58>
 8000756:	2300      	movs	r3, #0
 8000758:	b25a      	sxtb	r2, r3
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	4313      	orrs	r3, r2
 8000760:	b25b      	sxtb	r3, r3
 8000762:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOA->IDR & GPIO_IDR_11) ? (1 << 3) : 0;
 8000764:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000768:	691b      	ldr	r3, [r3, #16]
 800076a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <digital_read+0x76>
 8000772:	2308      	movs	r3, #8
 8000774:	e000      	b.n	8000778 <digital_read+0x78>
 8000776:	2300      	movs	r3, #0
 8000778:	b25a      	sxtb	r2, r3
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	4313      	orrs	r3, r2
 8000780:	b25b      	sxtb	r3, r3
 8000782:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOA->IDR & GPIO_IDR_12) ? (1 << 4) : 0;
 8000784:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <digital_read+0x96>
 8000792:	2310      	movs	r3, #16
 8000794:	e000      	b.n	8000798 <digital_read+0x98>
 8000796:	2300      	movs	r3, #0
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	4313      	orrs	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOC->IDR & GPIO_IDR_5) ? (1 << 5) : 0;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <digital_read+0xfc>)
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	f003 0320 	and.w	r3, r3, #32
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOC->IDR & GPIO_IDR_6) ? (1 << 6) : 0;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <digital_read+0xfc>)
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOC->IDR & GPIO_IDR_8) ? (1 << 7) : 0;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <digital_read+0xfc>)
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <digital_read+0xdc>
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	e000      	b.n	80007de <digital_read+0xde>
 80007dc:	2300      	movs	r3, #0
 80007de:	b25a      	sxtb	r2, r3
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	71fb      	strb	r3, [r7, #7]
    return inputVector;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	48000400 	.word	0x48000400
 80007fc:	48000800 	.word	0x48000800

08000800 <digital_write>:


void digital_write(uint8_t digital_output) {
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]

    GPIOA->ODR = (GPIOA->ODR & ~GPIO_PIN_10) | ((digital_output & 0x1) ? GPIO_PIN_10 : 0);
 800080a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	029b      	lsls	r3, r3, #10
 8000818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800081c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000820:	4313      	orrs	r3, r2
 8000822:	614b      	str	r3, [r1, #20]
    GPIOB->ODR = (GPIOB->ODR & ~GPIO_PIN_5) | ((digital_output & 0x2) ? GPIO_PIN_5 : 0);
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <digital_write+0xd8>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	f023 0220 	bic.w	r2, r3, #32
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	f003 0320 	and.w	r3, r3, #32
 8000834:	4928      	ldr	r1, [pc, #160]	; (80008d8 <digital_write+0xd8>)
 8000836:	4313      	orrs	r3, r2
 8000838:	614b      	str	r3, [r1, #20]
    GPIOB->ODR = (GPIOB->ODR & ~GPIO_PIN_4) | ((digital_output & 0x4) ? GPIO_PIN_4 : 0);
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <digital_write+0xd8>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f023 0210 	bic.w	r2, r3, #16
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	f003 0310 	and.w	r3, r3, #16
 800084a:	4923      	ldr	r1, [pc, #140]	; (80008d8 <digital_write+0xd8>)
 800084c:	4313      	orrs	r3, r2
 800084e:	614b      	str	r3, [r1, #20]
    GPIOB->ODR = (GPIOB->ODR & ~GPIO_PIN_10) | ((digital_output & 0x8) ? GPIO_PIN_10 : 0);
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <digital_write+0xd8>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	01db      	lsls	r3, r3, #7
 800085c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000860:	491d      	ldr	r1, [pc, #116]	; (80008d8 <digital_write+0xd8>)
 8000862:	4313      	orrs	r3, r2
 8000864:	614b      	str	r3, [r1, #20]
    GPIOA->ODR = (GPIOA->ODR & ~GPIO_PIN_8) | ((digital_output & 0x10) ? GPIO_PIN_8 : 0);
 8000866:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000878:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800087c:	4313      	orrs	r3, r2
 800087e:	614b      	str	r3, [r1, #20]
    GPIOA->ODR = (GPIOA->ODR & ~GPIO_PIN_9) | ((digital_output & 0x20) ? GPIO_PIN_9 : 0);
 8000880:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000892:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000896:	4313      	orrs	r3, r2
 8000898:	614b      	str	r3, [r1, #20]
    GPIOC->ODR = (GPIOC->ODR & ~GPIO_PIN_7) | ((digital_output & 0x40) ? GPIO_PIN_7 : 0);
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <digital_write+0xdc>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	490c      	ldr	r1, [pc, #48]	; (80008dc <digital_write+0xdc>)
 80008ac:	4313      	orrs	r3, r2
 80008ae:	614b      	str	r3, [r1, #20]
    GPIOB->ODR = (GPIOB->ODR & ~GPIO_PIN_6) | ((digital_output & 0x80) ? GPIO_PIN_6 : 0);
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <digital_write+0xd8>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	105b      	asrs	r3, r3, #1
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c4:	4904      	ldr	r1, [pc, #16]	; (80008d8 <digital_write+0xd8>)
 80008c6:	4313      	orrs	r3, r2
 80008c8:	614b      	str	r3, [r1, #20]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	48000400 	.word	0x48000400
 80008dc:	48000800 	.word	0x48000800

080008e0 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	static uint8_t stream_counter = 0;
	static uint8_t counter = 0;

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (counter >> 0) & 0x01);
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	461a      	mov	r2, r3
 80008f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f8:	4829      	ldr	r0, [pc, #164]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80008fa:	f002 fab5 	bl	8002e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (counter >> 1) & 0x01);
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	085b      	lsrs	r3, r3, #1
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	b2db      	uxtb	r3, r3
 800090c:	461a      	mov	r2, r3
 800090e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000912:	4823      	ldr	r0, [pc, #140]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000914:	f002 faa8 	bl	8002e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, (counter >> 2) & 0x01);
 8000918:	4b20      	ldr	r3, [pc, #128]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	089b      	lsrs	r3, r3, #2
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800092c:	481c      	ldr	r0, [pc, #112]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800092e:	f002 fa9b 	bl	8002e68 <HAL_GPIO_WritePin>

    HAL_ADC_Start(&hadc1); // start the adc
 8000932:	481c      	ldr	r0, [pc, #112]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000934:	f000 fdd2 	bl	80014dc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8000938:	2164      	movs	r1, #100	; 0x64
 800093a:	481a      	ldr	r0, [pc, #104]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800093c:	f000 feba 	bl	80016b4 <HAL_ADC_PollForConversion>
    adc_val[counter] = HAL_ADC_GetValue(&hadc1); // get the adc value
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461c      	mov	r4, r3
 8000946:	4817      	ldr	r0, [pc, #92]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000948:	f000 ff82 	bl	8001850 <HAL_ADC_GetValue>
 800094c:	4603      	mov	r3, r0
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000950:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    HAL_ADC_Stop(&hadc1); // stop adc
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000956:	f000 fe77 	bl	8001648 <HAL_ADC_Stop>

    if(counter==7){
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b07      	cmp	r3, #7
 8000960:	d10a      	bne.n	8000978 <HAL_TIM_PeriodElapsedCallback+0x98>
    	stream_send(stream_counter);
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f822 	bl	80009b0 <stream_send>
    	stream_counter = (stream_counter + 1) & 0xFF;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000976:	701a      	strb	r2, [r3, #0]
    }

    counter = (counter + 1) % 8;  // 3-bit counter (0 to 7) mux_selector
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	425a      	negs	r2, r3
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	f002 0207 	and.w	r2, r2, #7
 8000988:	bf58      	it	pl
 800098a:	4253      	negpl	r3, r2
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b03      	ldr	r3, [pc, #12]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	bf00      	nop
 800099c:	200001e7 	.word	0x200001e7
 80009a0:	48000400 	.word	0x48000400
 80009a4:	20000028 	.word	0x20000028
 80009a8:	200001b8 	.word	0x200001b8
 80009ac:	200001e8 	.word	0x200001e8

080009b0 <stream_send>:
    }
    sprintf(output, "%ld\r\n", arr[size - 1]);
}


void stream_send(uint8_t stream_counter){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	 * */
	uint32_t temp_chain[3];
	static uint8_t stream_data[20]={0};


	temp_chain[0]=adc_val[0]<<20 | adc_val[1]<<8 |adc_val[2]>>4;
 80009ba:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <stream_send+0x124>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	051a      	lsls	r2, r3, #20
 80009c0:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <stream_send+0x124>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	021b      	lsls	r3, r3, #8
 80009c6:	431a      	orrs	r2, r3
 80009c8:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <stream_send+0x124>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	091b      	lsrs	r3, r3, #4
 80009ce:	4313      	orrs	r3, r2
 80009d0:	60bb      	str	r3, [r7, #8]
	temp_chain[1]=adc_val[2]<<28 | adc_val[3]<<16 |adc_val[4]<<4 |adc_val[5]>>8;
 80009d2:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <stream_send+0x124>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	071a      	lsls	r2, r3, #28
 80009d8:	4b3e      	ldr	r3, [pc, #248]	; (8000ad4 <stream_send+0x124>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	041b      	lsls	r3, r3, #16
 80009de:	431a      	orrs	r2, r3
 80009e0:	4b3c      	ldr	r3, [pc, #240]	; (8000ad4 <stream_send+0x124>)
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	431a      	orrs	r2, r3
 80009e8:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <stream_send+0x124>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	4313      	orrs	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
	temp_chain[2]=adc_val[5]<<24 | adc_val[6]<<12 |adc_val[7];
 80009f2:	4b38      	ldr	r3, [pc, #224]	; (8000ad4 <stream_send+0x124>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	061a      	lsls	r2, r3, #24
 80009f8:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <stream_send+0x124>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	031b      	lsls	r3, r3, #12
 80009fe:	431a      	orrs	r2, r3
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <stream_send+0x124>)
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]


	stream_data[0]= 0x1B;
 8000a08:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <stream_send+0x128>)
 8000a0a:	221b      	movs	r2, #27
 8000a0c:	701a      	strb	r2, [r3, #0]
	stream_data[1]= stream_counter ;
 8000a0e:	4a32      	ldr	r2, [pc, #200]	; (8000ad8 <stream_send+0x128>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	7053      	strb	r3, [r2, #1]
	  // Iniciar desde la posición 2 de la cadena
	    int j = 2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]

	    // Copiar los datos en la cadena en orden big-endian
	    for (int i = 0; i < 3; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	e01b      	b.n	8000a56 <stream_send+0xa6>
	        for (int k = 3; k >= 0; k--) {
 8000a1e:	2303      	movs	r3, #3
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e012      	b.n	8000a4a <stream_send+0x9a>
	            stream_data[j++] = (temp_chain[i] >> (k * 8)) & 0xFF;
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	3320      	adds	r3, #32
 8000a2a:	443b      	add	r3, r7
 8000a2c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	fa22 f103 	lsr.w	r1, r2, r3
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	61fa      	str	r2, [r7, #28]
 8000a3e:	b2c9      	uxtb	r1, r1
 8000a40:	4a25      	ldr	r2, [pc, #148]	; (8000ad8 <stream_send+0x128>)
 8000a42:	54d1      	strb	r1, [r2, r3]
	        for (int k = 3; k >= 0; k--) {
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	dae9      	bge.n	8000a24 <stream_send+0x74>
	    for (int i = 0; i < 3; i++) {
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	3301      	adds	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	dde0      	ble.n	8000a1e <stream_send+0x6e>
	        }
	    }
	digital_In=digital_read();
 8000a5c:	f7ff fe50 	bl	8000700 <digital_read>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <stream_send+0x12c>)
 8000a66:	701a      	strb	r2, [r3, #0]

	stream_data[14]=digital_In;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <stream_send+0x12c>)
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <stream_send+0x128>)
 8000a6e:	739a      	strb	r2, [r3, #14]
	stream_data[15]=digital_Out;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <stream_send+0x130>)
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <stream_send+0x128>)
 8000a76:	73da      	strb	r2, [r3, #15]

	stream_data[16] = (dac_val[0] >> 4) & 0xFF; // Obtén los bits 11-4
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <stream_send+0x134>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	091b      	lsrs	r3, r3, #4
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <stream_send+0x128>)
 8000a84:	741a      	strb	r2, [r3, #16]
	stream_data[17]= ((dac_val[0] & 0xF) << 4) | ((dac_val[1] >> 8) & 0xF); // Combina bits 3-0 de variable1 con bits 11-8 de variable2
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <stream_send+0x134>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	011b      	lsls	r3, r3, #4
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <stream_send+0x134>)
 8000a90:	885b      	ldrh	r3, [r3, #2]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <stream_send+0x128>)
 8000aa6:	745a      	strb	r2, [r3, #17]
	stream_data[18]= dac_val[1] & 0xFF; // Obtén los bits 7-0 de variable2
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <stream_send+0x134>)
 8000aaa:	885b      	ldrh	r3, [r3, #2]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <stream_send+0x128>)
 8000ab0:	749a      	strb	r2, [r3, #18]

	stream_data[19]= calcular_crc8(stream_data,19);
 8000ab2:	2113      	movs	r1, #19
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <stream_send+0x128>)
 8000ab6:	f000 f819 	bl	8000aec <calcular_crc8>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <stream_send+0x128>)
 8000ac0:	74da      	strb	r2, [r3, #19]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)stream_data, sizeof (stream_data));
 8000ac2:	2214      	movs	r2, #20
 8000ac4:	4904      	ldr	r1, [pc, #16]	; (8000ad8 <stream_send+0x128>)
 8000ac6:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <stream_send+0x138>)
 8000ac8:	f004 f922 	bl	8004d10 <HAL_UART_Transmit_DMA>
}
 8000acc:	bf00      	nop
 8000ace:	3720      	adds	r7, #32
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200001b8 	.word	0x200001b8
 8000ad8:	200001ec 	.word	0x200001ec
 8000adc:	200001dc 	.word	0x200001dc
 8000ae0:	200001dd 	.word	0x200001dd
 8000ae4:	200001d8 	.word	0x200001d8
 8000ae8:	200000ec 	.word	0x200000ec

08000aec <calcular_crc8>:





uint8_t  calcular_crc8(uint8_t *cadena, uint8_t longitud) {
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
    // Polinomio generador CRC-8 (0x07)
    uint8_t polinomio_generador = 0x07;
 8000af8:	2307      	movs	r3, #7
 8000afa:	733b      	strb	r3, [r7, #12]

    // Inicializa el registro CRC en cero
    uint8_t registro_crc = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < longitud; i++) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	73bb      	strb	r3, [r7, #14]
 8000b04:	e022      	b.n	8000b4c <calcular_crc8+0x60>

        registro_crc ^= cadena[i];
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	4053      	eors	r3, r2
 8000b12:	73fb      	strb	r3, [r7, #15]

        for (uint8_t j = 0; j < 8; j++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	737b      	strb	r3, [r7, #13]
 8000b18:	e012      	b.n	8000b40 <calcular_crc8+0x54>

            if (registro_crc & 0x80) {
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	da08      	bge.n	8000b34 <calcular_crc8+0x48>
                registro_crc = (registro_crc << 1) ^ polinomio_generador;
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	b25a      	sxtb	r2, r3
 8000b28:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000b2c:	4053      	eors	r3, r2
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e002      	b.n	8000b3a <calcular_crc8+0x4e>

            } else {
                registro_crc <<= 1;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8000b3a:	7b7b      	ldrb	r3, [r7, #13]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	737b      	strb	r3, [r7, #13]
 8000b40:	7b7b      	ldrb	r3, [r7, #13]
 8000b42:	2b07      	cmp	r3, #7
 8000b44:	d9e9      	bls.n	8000b1a <calcular_crc8+0x2e>
    for (uint8_t i = 0; i < longitud; i++) {
 8000b46:	7bbb      	ldrb	r3, [r7, #14]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	73bb      	strb	r3, [r7, #14]
 8000b4c:	7bba      	ldrb	r2, [r7, #14]
 8000b4e:	78fb      	ldrb	r3, [r7, #3]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d3d8      	bcc.n	8000b06 <calcular_crc8+0x1a>

            }
        }
    }
       return registro_crc;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <HAL_UART_RxCpltCallback>:



/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <HAL_UART_RxCpltCallback+0x94>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d13b      	bne.n	8000bee <HAL_UART_RxCpltCallback+0x8a>
  {

	  digital_Out=uart_rx_buffer[2];
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_UART_RxCpltCallback+0x98>)
 8000b78:	789a      	ldrb	r2, [r3, #2]
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <HAL_UART_RxCpltCallback+0x9c>)
 8000b7c:	701a      	strb	r2, [r3, #0]
	  digital_write(digital_Out);
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <HAL_UART_RxCpltCallback+0x9c>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe3c 	bl	8000800 <digital_write>
	  dac_val[0] = (uart_rx_buffer[3] << 4) | ((uart_rx_buffer[4]>> 4) & 0x0F); // Combina Byte1 y Byte5
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_UART_RxCpltCallback+0x98>)
 8000b8a:	78db      	ldrb	r3, [r3, #3]
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_UART_RxCpltCallback+0x98>)
 8000b92:	791b      	ldrb	r3, [r3, #4]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_UART_RxCpltCallback+0xa0>)
 8000ba8:	801a      	strh	r2, [r3, #0]

	    // Extrae los bits de Char2 y Char3 para formar otro valor de 16 bits
	   dac_val[1] = ((uart_rx_buffer[4] & 0x0F) << 8) | uart_rx_buffer[5];
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_UART_RxCpltCallback+0x98>)
 8000bac:	791b      	ldrb	r3, [r3, #4]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_UART_RxCpltCallback+0x98>)
 8000bba:	795b      	ldrb	r3, [r3, #5]
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_UART_RxCpltCallback+0xa0>)
 8000bc6:	805a      	strh	r2, [r3, #2]
	   HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R, dac_val[0]);
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_UART_RxCpltCallback+0xa0>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <HAL_UART_RxCpltCallback+0xa4>)
 8000bd2:	f001 fc8c 	bl	80024ee <HAL_DAC_SetValue>
	   HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1,DAC_ALIGN_12B_R, dac_val[1]);
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_UART_RxCpltCallback+0xa0>)
 8000bd8:	885b      	ldrh	r3, [r3, #2]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	480b      	ldr	r0, [pc, #44]	; (8000c0c <HAL_UART_RxCpltCallback+0xa8>)
 8000be0:	f001 fc85 	bl	80024ee <HAL_DAC_SetValue>
    /* Receive one byte in interrupt mode */
	  HAL_UART_Receive_IT(&huart2,uart_rx_buffer, rx_buffer_size);
 8000be4:	2207      	movs	r2, #7
 8000be6:	4905      	ldr	r1, [pc, #20]	; (8000bfc <HAL_UART_RxCpltCallback+0x98>)
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <HAL_UART_RxCpltCallback+0xac>)
 8000bea:	f004 f84d 	bl	8004c88 <HAL_UART_Receive_IT>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40004400 	.word	0x40004400
 8000bfc:	200001e0 	.word	0x200001e0
 8000c00:	200001dd 	.word	0x200001dd
 8000c04:	200001d8 	.word	0x200001d8
 8000c08:	20000078 	.word	0x20000078
 8000c0c:	2000008c 	.word	0x2000008c
 8000c10:	200000ec 	.word	0x200000ec

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x44>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6193      	str	r3, [r2, #24]
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_MspInit+0x44>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x44>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x44>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x44>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c56:	2007      	movs	r0, #7
 8000c58:	f001 fbdc 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c88:	d124      	bne.n	8000cd4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_ADC_MspInit+0x74>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_ADC_MspInit+0x74>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_ADC_MspInit+0x74>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_ADC_MspInit+0x74>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_ADC_MspInit+0x74>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	6153      	str	r3, [r2, #20]
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_ADC_MspInit+0x74>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f001 ff58 	bl	8002b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a2f      	ldr	r2, [pc, #188]	; (8000dbc <HAL_DAC_MspInit+0xdc>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12d      	bne.n	8000d5e <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a2e      	ldr	r2, [pc, #184]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	6153      	str	r3, [r2, #20]
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d32:	2310      	movs	r3, #16
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f001 ff1c 	bl	8002b84 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2036      	movs	r0, #54	; 0x36
 8000d52:	f001 fb6a 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000d56:	2036      	movs	r0, #54	; 0x36
 8000d58:	f001 fb83 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8000d5c:	e029      	b.n	8000db2 <HAL_DAC_MspInit+0xd2>
  else if(hdac->Instance==DAC2)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <HAL_DAC_MspInit+0xe4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d124      	bne.n	8000db2 <HAL_DAC_MspInit+0xd2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d72:	61d3      	str	r3, [r2, #28]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8a:	6153      	str	r3, [r2, #20]
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_DAC_MspInit+0xe0>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d98:	2340      	movs	r3, #64	; 0x40
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f001 fee9 	bl	8002b84 <HAL_GPIO_Init>
}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	; 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40007400 	.word	0x40007400
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40009800 	.word	0x40009800

08000dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_TIM_Base_MspInit+0x44>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d113      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_TIM_Base_MspInit+0x48>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2036      	movs	r0, #54	; 0x36
 8000df8:	f001 fb17 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000dfc:	2036      	movs	r0, #54	; 0x36
 8000dfe:	f001 fb30 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40001000 	.word	0x40001000
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <HAL_UART_MspInit+0xd8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d156      	bne.n	8000ee4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <HAL_UART_MspInit+0xdc>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <HAL_UART_MspInit+0xdc>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <HAL_UART_MspInit+0xdc>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <HAL_UART_MspInit+0xdc>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a27      	ldr	r2, [pc, #156]	; (8000ef0 <HAL_UART_MspInit+0xdc>)
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <HAL_UART_MspInit+0xdc>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e66:	230c      	movs	r3, #12
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e76:	2307      	movs	r3, #7
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f001 fe7e 	bl	8002b84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000e8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <HAL_UART_MspInit+0xe4>)
 8000e8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000e90:	2210      	movs	r2, #16
 8000e92:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000eba:	f001 fc55 	bl	8002768 <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000ec4:	f7ff fea6 	bl	8000c14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000ecc:	671a      	str	r2, [r3, #112]	; 0x70
 8000ece:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <HAL_UART_MspInit+0xe0>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2026      	movs	r0, #38	; 0x26
 8000eda:	f001 faa6 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ede:	2026      	movs	r0, #38	; 0x26
 8000ee0:	f001 fabf 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	20000174 	.word	0x20000174
 8000ef8:	40020080 	.word	0x40020080

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

	//HAL_UART_Transmit (&huart2, data, sizeof (data), 24);
	// HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"1-2-3-4-5-6-7-8-9-10-11-12\n", strlen("1-2-3-4-5-6-7-8-9-10-11-12\n"));
//	 HAL_UART_Transmit_DMA(&huart2, buffer,8);
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f916 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

 // HAL_GPIO_WritePin(GPIOA, LD2_Pin, 1);
  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <DMA1_Channel7_IRQHandler+0x10>)
 8000f56:	f001 fd24 	bl	80029a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000174 	.word	0x20000174

08000f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART2_IRQHandler+0x10>)
 8000f6a:	f003 ff4d 	bl	8004e08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000ec 	.word	0x200000ec

08000f78 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <TIM6_DAC1_IRQHandler+0x14>)
 8000f7e:	f003 fbe9 	bl	8004754 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <TIM6_DAC1_IRQHandler+0x18>)
 8000f84:	f001 fb23 	bl	80025ce <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000a0 	.word	0x200000a0
 8000f90:	20000078 	.word	0x20000078

08000f94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <SystemCoreClockUpdate+0xcc>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d011      	beq.n	8001002 <SystemCoreClockUpdate+0x4a>
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d836      	bhi.n	8001052 <SystemCoreClockUpdate+0x9a>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <SystemCoreClockUpdate+0x3a>
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d004      	beq.n	8000ffa <SystemCoreClockUpdate+0x42>
 8000ff0:	e02f      	b.n	8001052 <SystemCoreClockUpdate+0x9a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <SystemCoreClockUpdate+0xd0>)
 8000ff4:	4a25      	ldr	r2, [pc, #148]	; (800108c <SystemCoreClockUpdate+0xd4>)
 8000ff6:	601a      	str	r2, [r3, #0]
      break;
 8000ff8:	e02f      	b.n	800105a <SystemCoreClockUpdate+0xa2>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000ffa:	4b23      	ldr	r3, [pc, #140]	; (8001088 <SystemCoreClockUpdate+0xd0>)
 8000ffc:	4a23      	ldr	r2, [pc, #140]	; (800108c <SystemCoreClockUpdate+0xd4>)
 8000ffe:	601a      	str	r2, [r3, #0]
      break;
 8001000:	e02b      	b.n	800105a <SystemCoreClockUpdate+0xa2>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <SystemCoreClockUpdate+0xcc>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800100a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <SystemCoreClockUpdate+0xcc>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001014:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	0c9b      	lsrs	r3, r3, #18
 800101a:	3302      	adds	r3, #2
 800101c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
      }
#else      
      if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d106      	bne.n	8001032 <SystemCoreClockUpdate+0x7a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <SystemCoreClockUpdate+0xd8>)
 8001028:	fb02 f303 	mul.w	r3, r2, r3
 800102c:	4a16      	ldr	r2, [pc, #88]	; (8001088 <SystemCoreClockUpdate+0xd0>)
 800102e:	6013      	str	r3, [r2, #0]
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
      }
#endif /* STM32F302xE || STM32F303xE || STM32F398xx */
      break;
 8001030:	e013      	b.n	800105a <SystemCoreClockUpdate+0xa2>
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <SystemCoreClockUpdate+0xcc>)
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3301      	adds	r3, #1
 800103c:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 800103e:	4a13      	ldr	r2, [pc, #76]	; (800108c <SystemCoreClockUpdate+0xd4>)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <SystemCoreClockUpdate+0xd0>)
 800104e:	6013      	str	r3, [r2, #0]
      break;
 8001050:	e003      	b.n	800105a <SystemCoreClockUpdate+0xa2>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <SystemCoreClockUpdate+0xd0>)
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <SystemCoreClockUpdate+0xd4>)
 8001056:	601a      	str	r2, [r3, #0]
      break;
 8001058:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <SystemCoreClockUpdate+0xcc>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <SystemCoreClockUpdate+0xdc>)
 8001066:	5cd3      	ldrb	r3, [r2, r3]
 8001068:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <SystemCoreClockUpdate+0xd0>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <SystemCoreClockUpdate+0xd0>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40021000 	.word	0x40021000
 8001088:	20000000 	.word	0x20000000
 800108c:	007a1200 	.word	0x007a1200
 8001090:	003d0900 	.word	0x003d0900
 8001094:	0800621c 	.word	0x0800621c

08001098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800109c:	f7ff ff7a 	bl	8000f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopForever+0xe>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopForever+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f005 f879 	bl	80061bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ca:	f7ff f87d 	bl	80001c8 <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010d0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010dc:	0800625c 	.word	0x0800625c
  ldr r2, =_sbss
 80010e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010e4:	20000204 	.word	0x20000204

080010e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>
	...

080010ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x28>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f001 f989 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fd8a 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f9a1 	bl	800247e <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f001 f969 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	20000200 	.word	0x20000200

080011a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000200 	.word	0x20000200

080011b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09a      	sub	sp, #104	; 0x68
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e172      	b.n	80014be <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d176      	bne.n	80012d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d152      	bne.n	8001298 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fd2b 	bl	8000c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d13b      	bne.n	8001298 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 ff0b 	bl	800203c <ADC_Disable>
 8001226:	4603      	mov	r3, r0
 8001228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	2b00      	cmp	r3, #0
 8001236:	d12f      	bne.n	8001298 <HAL_ADC_Init+0xe0>
 8001238:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800123c:	2b00      	cmp	r3, #0
 800123e:	d12b      	bne.n	8001298 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001248:	f023 0302 	bic.w	r3, r3, #2
 800124c:	f043 0202 	orr.w	r2, r3, #2
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001262:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001272:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001274:	4b94      	ldr	r3, [pc, #592]	; (80014c8 <HAL_ADC_Init+0x310>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a94      	ldr	r2, [pc, #592]	; (80014cc <HAL_ADC_Init+0x314>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9a      	lsrs	r2, r3, #18
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800128a:	e002      	b.n	8001292 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	3b01      	subs	r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f9      	bne.n	800128c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012b4:	d110      	bne.n	80012d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f023 0312 	bic.w	r3, r3, #18
 80012be:	f043 0210 	orr.w	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f040 80df 	bne.w	80014a4 <HAL_ADC_Init+0x2ec>
 80012e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 80da 	bne.w	80014a4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 80d2 	bne.w	80014a4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001308:	f043 0202 	orr.w	r2, r3, #2
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001310:	4b6f      	ldr	r3, [pc, #444]	; (80014d0 <HAL_ADC_Init+0x318>)
 8001312:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800131c:	d102      	bne.n	8001324 <HAL_ADC_Init+0x16c>
 800131e:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_ADC_Init+0x31c>)
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e002      	b.n	800132a <HAL_ADC_Init+0x172>
 8001324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001328:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d108      	bne.n	800134a <HAL_ADC_Init+0x192>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <HAL_ADC_Init+0x192>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_ADC_Init+0x194>
 800134a:	2300      	movs	r3, #0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d11c      	bne.n	800138a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001350:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	d010      	beq.n	8001378 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_ADC_Init+0x1ba>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0x1ba>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_ADC_Init+0x1bc>
 8001372:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001374:	2b00      	cmp	r3, #0
 8001376:	d108      	bne.n	800138a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	431a      	orrs	r2, r3
 8001386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001388:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e5b      	ldrb	r3, [r3, #25]
 800138e:	035b      	lsls	r3, r3, #13
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001394:	2a01      	cmp	r2, #1
 8001396:	d002      	beq.n	800139e <HAL_ADC_Init+0x1e6>
 8001398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800139c:	e000      	b.n	80013a0 <HAL_ADC_Init+0x1e8>
 800139e:	2200      	movs	r2, #0
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013b0:	4313      	orrs	r3, r2
 80013b2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d11b      	bne.n	80013f6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7e5b      	ldrb	r3, [r3, #25]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d109      	bne.n	80013da <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	3b01      	subs	r3, #1
 80013cc:	045a      	lsls	r2, r3, #17
 80013ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013d0:	4313      	orrs	r3, r2
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	663b      	str	r3, [r7, #96]	; 0x60
 80013d8:	e00d      	b.n	80013f6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80013e2:	f043 0220 	orr.w	r2, r3, #32
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d007      	beq.n	800140e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	4313      	orrs	r3, r2
 8001408:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800140a:	4313      	orrs	r3, r2
 800140c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b00      	cmp	r3, #0
 800141a:	d114      	bne.n	8001446 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800142a:	f023 0302 	bic.w	r3, r3, #2
 800142e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7e1b      	ldrb	r3, [r3, #24]
 8001434:	039a      	lsls	r2, r3, #14
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4313      	orrs	r3, r2
 8001440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001442:	4313      	orrs	r3, r2
 8001444:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_ADC_Init+0x320>)
 800144e:	4013      	ands	r3, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001456:	430b      	orrs	r3, r1
 8001458:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10c      	bne.n	800147c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f023 010f 	bic.w	r1, r3, #15
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	1e5a      	subs	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
 800147a:	e007      	b.n	800148c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 020f 	bic.w	r2, r2, #15
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	f043 0201 	orr.w	r2, r3, #1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40
 80014a2:	e00a      	b.n	80014ba <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f023 0312 	bic.w	r3, r3, #18
 80014ac:	f043 0210 	orr.w	r2, r3, #16
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014b4:	2301      	movs	r3, #1
 80014b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3768      	adds	r7, #104	; 0x68
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000
 80014cc:	431bde83 	.word	0x431bde83
 80014d0:	50000300 	.word	0x50000300
 80014d4:	50000100 	.word	0x50000100
 80014d8:	fff0c007 	.word	0xfff0c007

080014dc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 809c 	bne.w	8001630 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_ADC_Start+0x2a>
 8001502:	2302      	movs	r3, #2
 8001504:	e097      	b.n	8001636 <HAL_ADC_Start+0x15a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fd30 	bl	8001f74 <ADC_Enable>
 8001514:	4603      	mov	r3, r0
 8001516:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 8083 	bne.w	8001626 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001534:	4b42      	ldr	r3, [pc, #264]	; (8001640 <HAL_ADC_Start+0x164>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_ADC_Start+0x6e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001548:	d115      	bne.n	8001576 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d027      	beq.n	80015b4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800156c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001574:	e01e      	b.n	80015b4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800158a:	d004      	beq.n	8001596 <HAL_ADC_Start+0xba>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <HAL_ADC_Start+0x168>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10e      	bne.n	80015b4 <HAL_ADC_Start+0xd8>
 8001596:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c0:	d106      	bne.n	80015d0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f023 0206 	bic.w	r2, r3, #6
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	645a      	str	r2, [r3, #68]	; 0x44
 80015ce:	e002      	b.n	80015d6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	221c      	movs	r2, #28
 80015e4:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_ADC_Start+0x164>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d010      	beq.n	8001614 <HAL_ADC_Start+0x138>
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_ADC_Start+0x164>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d00a      	beq.n	8001614 <HAL_ADC_Start+0x138>
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_ADC_Start+0x164>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	2b09      	cmp	r3, #9
 8001608:	d004      	beq.n	8001614 <HAL_ADC_Start+0x138>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001612:	d10f      	bne.n	8001634 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0204 	orr.w	r2, r2, #4
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	e006      	b.n	8001634 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800162e:	e001      	b.n	8001634 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001630:	2302      	movs	r3, #2
 8001632:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	50000300 	.word	0x50000300
 8001644:	50000100 	.word	0x50000100

08001648 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_ADC_Stop+0x1a>
 800165e:	2302      	movs	r3, #2
 8001660:	e023      	b.n	80016aa <HAL_ADC_Stop+0x62>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800166a:	216c      	movs	r1, #108	; 0x6c
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 fd4b 	bl	8002108 <ADC_ConversionStop>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d111      	bne.n	80016a0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fcdd 	bl	800203c <ADC_Disable>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d109      	bne.n	80016a0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	f043 0201 	orr.w	r2, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d102      	bne.n	80016d0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80016ca:	2308      	movs	r3, #8
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	e02e      	b.n	800172e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <HAL_ADC_PollForConversion+0x198>)
 80016d2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d112      	bne.n	8001706 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d11d      	bne.n	800172a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f043 0220 	orr.w	r2, r3, #32
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e09d      	b.n	8001842 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f043 0220 	orr.w	r2, r3, #32
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e08b      	b.n	8001842 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800172a:	230c      	movs	r3, #12
 800172c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_ADC_PollForConversion+0x198>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <HAL_ADC_PollForConversion+0x90>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001742:	d104      	bne.n	800174e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	e003      	b.n	8001756 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800174e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001756:	f7ff fd23 	bl	80011a0 <HAL_GetTick>
 800175a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800175c:	e021      	b.n	80017a2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d01d      	beq.n	80017a2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <HAL_ADC_PollForConversion+0xc8>
 800176c:	f7ff fd18 	bl	80011a0 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d212      	bcs.n	80017a2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10b      	bne.n	80017a2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f043 0204 	orr.w	r2, r3, #4
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e04f      	b.n	8001842 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0d6      	beq.n	800175e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d131      	bne.n	800182e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d12c      	bne.n	800182e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d125      	bne.n	800182e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d112      	bne.n	8001816 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d112      	bne.n	800182e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f043 0201 	orr.w	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
 8001814:	e00b      	b.n	800182e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f043 0220 	orr.w	r2, r3, #32
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d103      	bne.n	8001840 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	50000300 	.word	0x50000300

08001850 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800186c:	b480      	push	{r7}
 800186e:	b09b      	sub	sp, #108	; 0x6c
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x22>
 800188a:	2302      	movs	r3, #2
 800188c:	e2a1      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x566>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 8285 	bne.w	8001db0 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d81c      	bhi.n	80018e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	461a      	mov	r2, r3
 80018c2:	231f      	movs	r3, #31
 80018c4:	4093      	lsls	r3, r2
 80018c6:	43db      	mvns	r3, r3
 80018c8:	4019      	ands	r1, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa00 f203 	lsl.w	r2, r0, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
 80018e6:	e063      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	d81e      	bhi.n	800192e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	3b1e      	subs	r3, #30
 8001904:	221f      	movs	r2, #31
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	4019      	ands	r1, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	3b1e      	subs	r3, #30
 8001920:	fa00 f203 	lsl.w	r2, r0, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	635a      	str	r2, [r3, #52]	; 0x34
 800192c:	e040      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b0e      	cmp	r3, #14
 8001934:	d81e      	bhi.n	8001974 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	3b3c      	subs	r3, #60	; 0x3c
 800194a:	221f      	movs	r2, #31
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	4019      	ands	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	3b3c      	subs	r3, #60	; 0x3c
 8001966:	fa00 f203 	lsl.w	r2, r0, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	639a      	str	r2, [r3, #56]	; 0x38
 8001972:	e01d      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	3b5a      	subs	r3, #90	; 0x5a
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	4019      	ands	r1, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	3b5a      	subs	r3, #90	; 0x5a
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 80e5 	bne.w	8001b8a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d91c      	bls.n	8001a02 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6999      	ldr	r1, [r3, #24]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	3b1e      	subs	r3, #30
 80019da:	2207      	movs	r2, #7
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4019      	ands	r1, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6898      	ldr	r0, [r3, #8]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	3b1e      	subs	r3, #30
 80019f4:	fa00 f203 	lsl.w	r2, r0, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	619a      	str	r2, [r3, #24]
 8001a00:	e019      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6959      	ldr	r1, [r3, #20]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	2207      	movs	r2, #7
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	4019      	ands	r1, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6898      	ldr	r0, [r3, #8]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d84f      	bhi.n	8001af8 <HAL_ADC_ConfigChannel+0x28c>
 8001a58:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <HAL_ADC_ConfigChannel+0x1f4>)
 8001a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5e:	bf00      	nop
 8001a60:	08001a71 	.word	0x08001a71
 8001a64:	08001a93 	.word	0x08001a93
 8001a68:	08001ab5 	.word	0x08001ab5
 8001a6c:	08001ad7 	.word	0x08001ad7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a76:	4b9c      	ldr	r3, [pc, #624]	; (8001ce8 <HAL_ADC_ConfigChannel+0x47c>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	0691      	lsls	r1, r2, #26
 8001a80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a82:	430a      	orrs	r2, r1
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a8e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a90:	e07b      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a98:	4b93      	ldr	r3, [pc, #588]	; (8001ce8 <HAL_ADC_ConfigChannel+0x47c>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	0691      	lsls	r1, r2, #26
 8001aa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ab0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ab2:	e06a      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001aba:	4b8b      	ldr	r3, [pc, #556]	; (8001ce8 <HAL_ADC_ConfigChannel+0x47c>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	0691      	lsls	r1, r2, #26
 8001ac4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ad2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ad4:	e059      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001adc:	4b82      	ldr	r3, [pc, #520]	; (8001ce8 <HAL_ADC_ConfigChannel+0x47c>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	0691      	lsls	r1, r2, #26
 8001ae6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001af4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001af6:	e048      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	069b      	lsls	r3, r3, #26
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d107      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b1a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	069b      	lsls	r3, r3, #26
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d107      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b3e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	069b      	lsls	r3, r3, #26
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d107      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b62:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	069b      	lsls	r3, r3, #26
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d107      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b86:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b88:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d108      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x33e>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x33e>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_ADC_ConfigChannel+0x340>
 8001baa:	2300      	movs	r3, #0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 810a 	bne.w	8001dc6 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d00f      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001bd8:	e049      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b09      	cmp	r3, #9
 8001bfa:	d91c      	bls.n	8001c36 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6999      	ldr	r1, [r3, #24]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b1b      	subs	r3, #27
 8001c0e:	2207      	movs	r2, #7
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	4019      	ands	r1, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6898      	ldr	r0, [r3, #8]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	3b1b      	subs	r3, #27
 8001c28:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	619a      	str	r2, [r3, #24]
 8001c34:	e01b      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6959      	ldr	r1, [r3, #20]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	2207      	movs	r2, #7
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4019      	ands	r1, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6898      	ldr	r0, [r3, #8]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	fa00 f203 	lsl.w	r2, r0, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <HAL_ADC_ConfigChannel+0x480>)
 8001c70:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d105      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d015      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c8a:	2b11      	cmp	r3, #17
 8001c8c:	d105      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	f040 8091 	bne.w	8001dc6 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f040 808a 	bne.w	8001dc6 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cba:	d102      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x456>
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_ADC_ConfigChannel+0x484>)
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e002      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x45c>
 8001cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cc6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x488>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x488>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e006      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x48a>
 8001ce8:	83fff000 	.word	0x83fff000
 8001cec:	50000300 	.word	0x50000300
 8001cf0:	50000100 	.word	0x50000100
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d150      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cfa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x4b0>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x4b0>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x4b2>
 8001d1c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d13c      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d11d      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x4fa>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d32:	d118      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d3e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_ADC_ConfigChannel+0x574>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <HAL_ADC_ConfigChannel+0x578>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0c9a      	lsrs	r2, r3, #18
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d56:	e002      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f9      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d64:	e02e      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b11      	cmp	r3, #17
 8001d6c:	d10b      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x51a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d76:	d106      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d82:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d84:	e01e      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d11a      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d98:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d9a:	e013      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dae:	e00a      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f043 0220 	orr.w	r2, r3, #32
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dc2:	e000      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dc4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001dce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	376c      	adds	r7, #108	; 0x6c
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000000 	.word	0x20000000
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b099      	sub	sp, #100	; 0x64
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e00:	d102      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e02:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	e002      	b.n	8001e0e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001e08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e0c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0a2      	b.n	8001f5e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e09b      	b.n	8001f5e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d17f      	bne.n	8001f3c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d179      	bne.n	8001f3c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e48:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001e4a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d040      	beq.n	8001ed6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e66:	035b      	lsls	r3, r3, #13
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e6e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001e90:	2300      	movs	r3, #0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d15c      	bne.n	8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001eb2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d14b      	bne.n	8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ec0:	f023 030f 	bic.w	r3, r3, #15
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	6811      	ldr	r1, [r2, #0]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	6892      	ldr	r2, [r2, #8]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ed4:	e03c      	b.n	8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d108      	bne.n	8001f02 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001f02:	2300      	movs	r3, #0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d123      	bne.n	8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001f24:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d112      	bne.n	8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f32:	f023 030f 	bic.w	r3, r3, #15
 8001f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f38:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f3a:	e009      	b.n	8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f043 0220 	orr.w	r2, r3, #32
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001f4e:	e000      	b.n	8001f52 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f50:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3764      	adds	r7, #100	; 0x64
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	50000100 	.word	0x50000100
 8001f70:	50000300 	.word	0x50000300

08001f74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <ADC_Enable+0x2c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <ADC_Enable+0x2c>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <ADC_Enable+0x2e>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d143      	bne.n	800202e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	4b22      	ldr	r3, [pc, #136]	; (8002038 <ADC_Enable+0xc4>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00d      	beq.n	8001fd0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f043 0210 	orr.w	r2, r3, #16
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e02f      	b.n	8002030 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001fe0:	f7ff f8de 	bl	80011a0 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fe6:	e01b      	b.n	8002020 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fe8:	f7ff f8da 	bl	80011a0 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d914      	bls.n	8002020 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d00d      	beq.n	8002020 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f043 0210 	orr.w	r2, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e007      	b.n	8002030 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d1dc      	bne.n	8001fe8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	8000003f 	.word	0x8000003f

0800203c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d108      	bne.n	8002068 <ADC_Disable+0x2c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <ADC_Disable+0x2c>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <ADC_Disable+0x2e>
 8002068:	2300      	movs	r3, #0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d047      	beq.n	80020fe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 030d 	and.w	r3, r3, #13
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10f      	bne.n	800209c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0202 	orr.w	r2, r2, #2
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2203      	movs	r2, #3
 8002092:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002094:	f7ff f884 	bl	80011a0 <HAL_GetTick>
 8002098:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800209a:	e029      	b.n	80020f0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f043 0210 	orr.w	r2, r3, #16
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e023      	b.n	8002100 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020b8:	f7ff f872 	bl	80011a0 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d914      	bls.n	80020f0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10d      	bne.n	80020f0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0210 	orr.w	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e007      	b.n	8002100 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d0dc      	beq.n	80020b8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 809b 	beq.w	8002264 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800213c:	d12a      	bne.n	8002194 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002142:	2b01      	cmp	r3, #1
 8002144:	d126      	bne.n	8002194 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800214a:	2b01      	cmp	r3, #1
 800214c:	d122      	bne.n	8002194 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800214e:	230c      	movs	r3, #12
 8002150:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002152:	e014      	b.n	800217e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4a46      	ldr	r2, [pc, #280]	; (8002270 <ADC_ConversionStop+0x168>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d90d      	bls.n	8002178 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0210 	orr.w	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e076      	b.n	8002266 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3301      	adds	r3, #1
 800217c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d1e3      	bne.n	8002154 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2240      	movs	r2, #64	; 0x40
 8002192:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b60      	cmp	r3, #96	; 0x60
 8002198:	d015      	beq.n	80021c6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d10e      	bne.n	80021c6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0210 	orr.w	r2, r2, #16
 80021c4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	d015      	beq.n	80021f8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d10e      	bne.n	80021f8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d107      	bne.n	80021f8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0220 	orr.w	r2, r2, #32
 80021f6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b60      	cmp	r3, #96	; 0x60
 80021fc:	d005      	beq.n	800220a <ADC_ConversionStop+0x102>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b6c      	cmp	r3, #108	; 0x6c
 8002202:	d105      	bne.n	8002210 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002204:	230c      	movs	r3, #12
 8002206:	617b      	str	r3, [r7, #20]
        break;
 8002208:	e005      	b.n	8002216 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800220a:	2308      	movs	r3, #8
 800220c:	617b      	str	r3, [r7, #20]
        break;
 800220e:	e002      	b.n	8002216 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002210:	2304      	movs	r3, #4
 8002212:	617b      	str	r3, [r7, #20]
        break;
 8002214:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002216:	f7fe ffc3 	bl	80011a0 <HAL_GetTick>
 800221a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800221c:	e01b      	b.n	8002256 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800221e:	f7fe ffbf 	bl	80011a0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b0b      	cmp	r3, #11
 800222a:	d914      	bls.n	8002256 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f043 0210 	orr.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f043 0201 	orr.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e007      	b.n	8002266 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1dc      	bne.n	800221e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	000993ff 	.word	0x000993ff

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff3e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff31 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e014      	b.n	80024d2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	791b      	ldrb	r3, [r3, #4]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d105      	bne.n	80024be <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fe fc11 	bl	8000ce0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80024ee:	b480      	push	{r7}
 80024f0:	b087      	sub	sp, #28
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	3308      	adds	r3, #8
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e004      	b.n	8002522 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	3314      	adds	r3, #20
 8002520:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	461a      	mov	r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	795b      	ldrb	r3, [r3, #5]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_DAC_Start+0x16>
 800254a:	2302      	movs	r3, #2
 800254c:	e039      	b.n	80025c2 <HAL_DAC_Start+0x8a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	2201      	movs	r2, #1
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	409a      	lsls	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800257e:	2b3c      	cmp	r3, #60	; 0x3c
 8002580:	d118      	bne.n	80025b4 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	e00f      	b.n	80025b4 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800259e:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80025a2:	d107      	bne.n	80025b4 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0202 	orr.w	r2, r2, #2
 80025b2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e4:	d120      	bne.n	8002628 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f4:	d118      	bne.n	8002628 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2204      	movs	r2, #4
 80025fa:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002610:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002620:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff59 	bl	80024da <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002636:	d120      	bne.n	800267a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002646:	d118      	bne.n	800267a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2204      	movs	r2, #4
 800264c:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002662:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002672:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f86d 	bl	8002754 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	795b      	ldrb	r3, [r3, #5]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_DAC_ConfigChannel+0x20>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e04e      	b.n	8002742 <HAL_DAC_ConfigChannel+0xbe>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2202      	movs	r2, #2
 80026ae:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a24      	ldr	r2, [pc, #144]	; (8002750 <HAL_DAC_ConfigChannel+0xcc>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d112      	bne.n	80026e8 <HAL_DAC_ConfigChannel+0x64>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10f      	bne.n	80026e8 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80026c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4013      	ands	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	e00e      	b.n	8002706 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80026e8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4013      	ands	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	22c0      	movs	r2, #192	; 0xc0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	400a      	ands	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40007400 	.word	0x40007400

08002754 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e037      	b.n	80027ee <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002794:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002798:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f9b7 	bl	8002b44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}  
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_DMA_Start_IT+0x20>
 8002812:	2302      	movs	r3, #2
 8002814:	e04a      	b.n	80028ac <HAL_DMA_Start_IT+0xb6>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002824:	2b01      	cmp	r3, #1
 8002826:	d13a      	bne.n	800289e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f94b 	bl	8002ae8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 020e 	orr.w	r2, r2, #14
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e00f      	b.n	800288c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 020a 	orr.w	r2, r2, #10
 800287a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0204 	bic.w	r2, r2, #4
 800288a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e005      	b.n	80028aa <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
 80028a8:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
} 
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d008      	beq.n	80028d8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2204      	movs	r2, #4
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e020      	b.n	800291a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 020e 	bic.w	r2, r2, #14
 80028e6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002938:	2b02      	cmp	r3, #2
 800293a:	d005      	beq.n	8002948 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2204      	movs	r2, #4
 8002940:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	e027      	b.n	8002998 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 020e 	bic.w	r2, r2, #14
 8002956:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f202 	lsl.w	r2, r1, r2
 8002976:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
    } 
  }
  return status;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	2204      	movs	r2, #4
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d024      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x72>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01f      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0204 	bic.w	r2, r2, #4
 80029f0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	2104      	movs	r1, #4
 80029fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002a00:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d06a      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002a12:	e065      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2202      	movs	r2, #2
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d02c      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xdc>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d027      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 020a 	bic.w	r2, r2, #10
 8002a4a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a62:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d035      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002a7c:	e030      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2208      	movs	r2, #8
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d028      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x13e>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d023      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 020e 	bic.w	r2, r2, #14
 8002aa6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
    }
  }
}  
 8002ade:	e7ff      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x13e>
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d108      	bne.n	8002b28 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b26:	e007      	b.n	8002b38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	60da      	str	r2, [r3, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <DMA_CalcBaseAndBitshift+0x34>)
 8002b54:	4413      	add	r3, r2
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <DMA_CalcBaseAndBitshift+0x38>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	009a      	lsls	r2, r3, #2
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a06      	ldr	r2, [pc, #24]	; (8002b80 <DMA_CalcBaseAndBitshift+0x3c>)
 8002b68:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	bffdfff8 	.word	0xbffdfff8
 8002b7c:	cccccccd 	.word	0xcccccccd
 8002b80:	40020000 	.word	0x40020000

08002b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b92:	e14e      	b.n	8002e32 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8140 	beq.w	8002e2c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d005      	beq.n	8002bc4 <HAL_GPIO_Init+0x40>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d130      	bne.n	8002c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f003 0201 	and.w	r2, r3, #1
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d017      	beq.n	8002c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d123      	bne.n	8002cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	08da      	lsrs	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3208      	adds	r2, #8
 8002c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	08da      	lsrs	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3208      	adds	r2, #8
 8002cb0:	6939      	ldr	r1, [r7, #16]
 8002cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0203 	and.w	r2, r3, #3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 809a 	beq.w	8002e2c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf8:	4b55      	ldr	r3, [pc, #340]	; (8002e50 <HAL_GPIO_Init+0x2cc>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	4a54      	ldr	r2, [pc, #336]	; (8002e50 <HAL_GPIO_Init+0x2cc>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6193      	str	r3, [r2, #24]
 8002d04:	4b52      	ldr	r3, [pc, #328]	; (8002e50 <HAL_GPIO_Init+0x2cc>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d10:	4a50      	ldr	r2, [pc, #320]	; (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	3302      	adds	r3, #2
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	220f      	movs	r2, #15
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d3a:	d013      	beq.n	8002d64 <HAL_GPIO_Init+0x1e0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a46      	ldr	r2, [pc, #280]	; (8002e58 <HAL_GPIO_Init+0x2d4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00d      	beq.n	8002d60 <HAL_GPIO_Init+0x1dc>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a45      	ldr	r2, [pc, #276]	; (8002e5c <HAL_GPIO_Init+0x2d8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <HAL_GPIO_Init+0x1d8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a44      	ldr	r2, [pc, #272]	; (8002e60 <HAL_GPIO_Init+0x2dc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_GPIO_Init+0x1d4>
 8002d54:	2303      	movs	r3, #3
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x1e2>
 8002d58:	2305      	movs	r3, #5
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_Init+0x1e2>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_Init+0x1e2>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_Init+0x1e2>
 8002d64:	2300      	movs	r3, #0
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d76:	4937      	ldr	r1, [pc, #220]	; (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d84:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <HAL_GPIO_Init+0x2e0>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002da8:	4a2e      	ldr	r2, [pc, #184]	; (8002e64 <HAL_GPIO_Init+0x2e0>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dae:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <HAL_GPIO_Init+0x2e0>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dd2:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <HAL_GPIO_Init+0x2e0>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd8:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_GPIO_Init+0x2e0>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_GPIO_Init+0x2e0>)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <HAL_GPIO_Init+0x2e0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e26:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <HAL_GPIO_Init+0x2e0>)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f47f aea9 	bne.w	8002b94 <HAL_GPIO_Init+0x10>
  }
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010000 	.word	0x40010000
 8002e58:	48000400 	.word	0x48000400
 8002e5c:	48000800 	.word	0x48000800
 8002e60:	48000c00 	.word	0x48000c00
 8002e64:	40010400 	.word	0x40010400

08002e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
 8002e74:	4613      	mov	r3, r2
 8002e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e78:	787b      	ldrb	r3, [r7, #1]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e84:	e002      	b.n	8002e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f001 b823 	b.w	8003f04 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 817d 	beq.w	80031ce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ed4:	4bbc      	ldr	r3, [pc, #752]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d00c      	beq.n	8002efa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ee0:	4bb9      	ldr	r3, [pc, #740]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d15c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x10e>
 8002eec:	4bb6      	ldr	r3, [pc, #728]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d155      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x10e>
 8002efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d102      	bne.n	8002f2c <HAL_RCC_OscConfig+0x94>
 8002f26:	4ba8      	ldr	r3, [pc, #672]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	e015      	b.n	8002f58 <HAL_RCC_OscConfig+0xc0>
 8002f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f30:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f48:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002f54:	4b9c      	ldr	r3, [pc, #624]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f5c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002f60:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002f64:	fa92 f2a2 	rbit	r2, r2
 8002f68:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002f6c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002f70:	fab2 f282 	clz	r2, r2
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	f042 0220 	orr.w	r2, r2, #32
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	f002 021f 	and.w	r2, r2, #31
 8002f80:	2101      	movs	r1, #1
 8002f82:	fa01 f202 	lsl.w	r2, r1, r2
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 811f 	beq.w	80031cc <HAL_RCC_OscConfig+0x334>
 8002f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 8116 	bne.w	80031cc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f000 bfaf 	b.w	8003f04 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x12e>
 8002fb8:	4b83      	ldr	r3, [pc, #524]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a82      	ldr	r2, [pc, #520]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e036      	b.n	8003034 <HAL_RCC_OscConfig+0x19c>
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x158>
 8002fd6:	4b7c      	ldr	r3, [pc, #496]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7b      	ldr	r2, [pc, #492]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b79      	ldr	r3, [pc, #484]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a78      	ldr	r2, [pc, #480]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8002fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e021      	b.n	8003034 <HAL_RCC_OscConfig+0x19c>
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x184>
 8003002:	4b71      	ldr	r3, [pc, #452]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a70      	ldr	r2, [pc, #448]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b6e      	ldr	r3, [pc, #440]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a6d      	ldr	r2, [pc, #436]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0x19c>
 800301c:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a69      	ldr	r2, [pc, #420]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b67      	ldr	r3, [pc, #412]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a66      	ldr	r2, [pc, #408]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003032:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003034:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	f023 020f 	bic.w	r2, r3, #15
 800303c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	495f      	ldr	r1, [pc, #380]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 800304a:	4313      	orrs	r3, r2
 800304c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d059      	beq.n	8003112 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305e:	f7fe f89f 	bl	80011a0 <HAL_GetTick>
 8003062:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003068:	f7fe f89a 	bl	80011a0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b64      	cmp	r3, #100	; 0x64
 8003076:	d902      	bls.n	800307e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	f000 bf43 	b.w	8003f04 <HAL_RCC_OscConfig+0x106c>
 800307e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003082:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003092:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_RCC_OscConfig+0x218>
 80030aa:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	e015      	b.n	80030dc <HAL_RCC_OscConfig+0x244>
 80030b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80030c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030c8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80030cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80030d8:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030e0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80030e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80030e8:	fa92 f2a2 	rbit	r2, r2
 80030ec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80030f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f002 021f 	and.w	r2, r2, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f202 	lsl.w	r2, r1, r2
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ab      	beq.n	8003068 <HAL_RCC_OscConfig+0x1d0>
 8003110:	e05d      	b.n	80031ce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe f845 	bl	80011a0 <HAL_GetTick>
 8003116:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800311c:	f7fe f840 	bl	80011a0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b64      	cmp	r3, #100	; 0x64
 800312a:	d902      	bls.n	8003132 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	f000 bee9 	b.w	8003f04 <HAL_RCC_OscConfig+0x106c>
 8003132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003136:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003146:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_RCC_OscConfig+0x2cc>
 800315e:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	e015      	b.n	8003190 <HAL_RCC_OscConfig+0x2f8>
 8003164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003168:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003180:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_RCC_OscConfig+0x330>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003194:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003198:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80031a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80031a8:	fab2 f282 	clz	r2, r2
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f042 0220 	orr.w	r2, r2, #32
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f002 021f 	and.w	r2, r2, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ab      	bne.n	800311c <HAL_RCC_OscConfig+0x284>
 80031c4:	e003      	b.n	80031ce <HAL_RCC_OscConfig+0x336>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 817d 	beq.w	80034de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031e4:	4ba6      	ldr	r3, [pc, #664]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00b      	beq.n	8003208 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031f0:	4ba3      	ldr	r3, [pc, #652]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d172      	bne.n	80032e2 <HAL_RCC_OscConfig+0x44a>
 80031fc:	4ba0      	ldr	r3, [pc, #640]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d16c      	bne.n	80032e2 <HAL_RCC_OscConfig+0x44a>
 8003208:	2302      	movs	r3, #2
 800320a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800321a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d102      	bne.n	8003238 <HAL_RCC_OscConfig+0x3a0>
 8003232:	4b93      	ldr	r3, [pc, #588]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	e013      	b.n	8003260 <HAL_RCC_OscConfig+0x3c8>
 8003238:	2302      	movs	r3, #2
 800323a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800324a:	2302      	movs	r3, #2
 800324c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003250:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800325c:	4b88      	ldr	r3, [pc, #544]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2202      	movs	r2, #2
 8003262:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003266:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800326a:	fa92 f2a2 	rbit	r2, r2
 800326e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003272:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003276:	fab2 f282 	clz	r2, r2
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	f042 0220 	orr.w	r2, r2, #32
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	f002 021f 	and.w	r2, r2, #31
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f202 	lsl.w	r2, r1, r2
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCC_OscConfig+0x410>
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d002      	beq.n	80032a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f000 be2e 	b.w	8003f04 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a8:	4b75      	ldr	r3, [pc, #468]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	21f8      	movs	r1, #248	; 0xf8
 80032be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80032c6:	fa91 f1a1 	rbit	r1, r1
 80032ca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80032ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80032d2:	fab1 f181 	clz	r1, r1
 80032d6:	b2c9      	uxtb	r1, r1
 80032d8:	408b      	lsls	r3, r1
 80032da:	4969      	ldr	r1, [pc, #420]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e0:	e0fd      	b.n	80034de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8088 	beq.w	8003404 <HAL_RCC_OscConfig+0x56c>
 80032f4:	2301      	movs	r3, #1
 80032f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003306:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	461a      	mov	r2, r3
 800331c:	2301      	movs	r3, #1
 800331e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fd ff3e 	bl	80011a0 <HAL_GetTick>
 8003324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332a:	f7fd ff39 	bl	80011a0 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d902      	bls.n	8003340 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	f000 bde2 	b.w	8003f04 <HAL_RCC_OscConfig+0x106c>
 8003340:	2302      	movs	r3, #2
 8003342:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003352:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d102      	bne.n	8003370 <HAL_RCC_OscConfig+0x4d8>
 800336a:	4b45      	ldr	r3, [pc, #276]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	e013      	b.n	8003398 <HAL_RCC_OscConfig+0x500>
 8003370:	2302      	movs	r3, #2
 8003372:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003382:	2302      	movs	r3, #2
 8003384:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003388:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003394:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	2202      	movs	r2, #2
 800339a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800339e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80033a2:	fa92 f2a2 	rbit	r2, r2
 80033a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80033aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80033ae:	fab2 f282 	clz	r2, r2
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	f042 0220 	orr.w	r2, r2, #32
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f002 021f 	and.w	r2, r2, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f202 	lsl.w	r2, r1, r2
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0af      	beq.n	800332a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	21f8      	movs	r1, #248	; 0xf8
 80033e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80033e8:	fa91 f1a1 	rbit	r1, r1
 80033ec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80033f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80033f4:	fab1 f181 	clz	r1, r1
 80033f8:	b2c9      	uxtb	r1, r1
 80033fa:	408b      	lsls	r3, r1
 80033fc:	4920      	ldr	r1, [pc, #128]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
 8003402:	e06c      	b.n	80034de <HAL_RCC_OscConfig+0x646>
 8003404:	2301      	movs	r3, #1
 8003406:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003424:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	461a      	mov	r2, r3
 800342c:	2300      	movs	r3, #0
 800342e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fd feb6 	bl	80011a0 <HAL_GetTick>
 8003434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7fd feb1 	bl	80011a0 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d902      	bls.n	8003450 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	f000 bd5a 	b.w	8003f04 <HAL_RCC_OscConfig+0x106c>
 8003450:	2302      	movs	r3, #2
 8003452:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d104      	bne.n	8003484 <HAL_RCC_OscConfig+0x5ec>
 800347a:	4b01      	ldr	r3, [pc, #4]	; (8003480 <HAL_RCC_OscConfig+0x5e8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	e015      	b.n	80034ac <HAL_RCC_OscConfig+0x614>
 8003480:	40021000 	.word	0x40021000
 8003484:	2302      	movs	r3, #2
 8003486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003496:	2302      	movs	r3, #2
 8003498:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800349c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80034a8:	4bc8      	ldr	r3, [pc, #800]	; (80037cc <HAL_RCC_OscConfig+0x934>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	2202      	movs	r2, #2
 80034ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80034b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80034b6:	fa92 f2a2 	rbit	r2, r2
 80034ba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80034be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80034c2:	fab2 f282 	clz	r2, r2
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f042 0220 	orr.w	r2, r2, #32
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f002 021f 	and.w	r2, r2, #31
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ad      	bne.n	800343a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8110 	beq.w	8003714 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d079      	beq.n	80035f8 <HAL_RCC_OscConfig+0x760>
 8003504:	2301      	movs	r3, #1
 8003506:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	4bab      	ldr	r3, [pc, #684]	; (80037d0 <HAL_RCC_OscConfig+0x938>)
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	461a      	mov	r2, r3
 800352a:	2301      	movs	r3, #1
 800352c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fd fe37 	bl	80011a0 <HAL_GetTick>
 8003532:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003538:	f7fd fe32 	bl	80011a0 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d902      	bls.n	800354e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	f000 bcdb 	b.w	8003f04 <HAL_RCC_OscConfig+0x106c>
 800354e:	2302      	movs	r3, #2
 8003550:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003568:	2202      	movs	r2, #2
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003570:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	fa93 f2a3 	rbit	r2, r3
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800358c:	2202      	movs	r2, #2
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80035a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a8:	4b88      	ldr	r3, [pc, #544]	; (80037cc <HAL_RCC_OscConfig+0x934>)
 80035aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035b4:	2102      	movs	r1, #2
 80035b6:	6019      	str	r1, [r3, #0]
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f1a3 	rbit	r1, r3
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80035ce:	6019      	str	r1, [r3, #0]
  return result;
 80035d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0a0      	beq.n	8003538 <HAL_RCC_OscConfig+0x6a0>
 80035f6:	e08d      	b.n	8003714 <HAL_RCC_OscConfig+0x87c>
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003608:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	fa93 f2a3 	rbit	r2, r3
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800361a:	601a      	str	r2, [r3, #0]
  return result;
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003624:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	4b68      	ldr	r3, [pc, #416]	; (80037d0 <HAL_RCC_OscConfig+0x938>)
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	461a      	mov	r2, r3
 8003636:	2300      	movs	r3, #0
 8003638:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363a:	f7fd fdb1 	bl	80011a0 <HAL_GetTick>
 800363e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003644:	f7fd fdac 	bl	80011a0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d902      	bls.n	800365a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	f000 bc55 	b.w	8003f04 <HAL_RCC_OscConfig+0x106c>
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003662:	2202      	movs	r2, #2
 8003664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	fa93 f2a3 	rbit	r2, r3
 8003674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003678:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003686:	2202      	movs	r2, #2
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	fa93 f2a3 	rbit	r2, r3
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036aa:	2202      	movs	r2, #2
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	fa93 f2a3 	rbit	r2, r3
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c6:	4b41      	ldr	r3, [pc, #260]	; (80037cc <HAL_RCC_OscConfig+0x934>)
 80036c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80036d2:	2102      	movs	r1, #2
 80036d4:	6019      	str	r1, [r3, #0]
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	fa93 f1a3 	rbit	r1, r3
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80036ec:	6019      	str	r1, [r3, #0]
  return result;
 80036ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d197      	bne.n	8003644 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 81a1 	beq.w	8003a6c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003730:	4b26      	ldr	r3, [pc, #152]	; (80037cc <HAL_RCC_OscConfig+0x934>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d116      	bne.n	800376a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b23      	ldr	r3, [pc, #140]	; (80037cc <HAL_RCC_OscConfig+0x934>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <HAL_RCC_OscConfig+0x934>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003746:	61d3      	str	r3, [r2, #28]
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_RCC_OscConfig+0x934>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003762:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCC_OscConfig+0x93c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11a      	bne.n	80037ac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_RCC_OscConfig+0x93c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <HAL_RCC_OscConfig+0x93c>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003780:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003782:	f7fd fd0d 	bl	80011a0 <HAL_GetTick>
 8003786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	e009      	b.n	80037a0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378c:	f7fd fd08 	bl	80011a0 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b64      	cmp	r3, #100	; 0x64
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e3b1      	b.n	8003f04 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RCC_OscConfig+0x93c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCC_OscConfig+0x940>
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCC_OscConfig+0x934>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a02      	ldr	r2, [pc, #8]	; (80037cc <HAL_RCC_OscConfig+0x934>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6213      	str	r3, [r2, #32]
 80037c8:	e03c      	b.n	8003844 <HAL_RCC_OscConfig+0x9ac>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	10908120 	.word	0x10908120
 80037d4:	40007000 	.word	0x40007000
 80037d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10c      	bne.n	8003802 <HAL_RCC_OscConfig+0x96a>
 80037e8:	4bc1      	ldr	r3, [pc, #772]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4ac0      	ldr	r2, [pc, #768]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6213      	str	r3, [r2, #32]
 80037f4:	4bbe      	ldr	r3, [pc, #760]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4abd      	ldr	r2, [pc, #756]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	e020      	b.n	8003844 <HAL_RCC_OscConfig+0x9ac>
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b05      	cmp	r3, #5
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x994>
 8003812:	4bb7      	ldr	r3, [pc, #732]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4ab6      	ldr	r2, [pc, #728]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 8003818:	f043 0304 	orr.w	r3, r3, #4
 800381c:	6213      	str	r3, [r2, #32]
 800381e:	4bb4      	ldr	r3, [pc, #720]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4ab3      	ldr	r2, [pc, #716]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6213      	str	r3, [r2, #32]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0x9ac>
 800382c:	4bb0      	ldr	r3, [pc, #704]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4aaf      	ldr	r2, [pc, #700]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	4bad      	ldr	r3, [pc, #692]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4aac      	ldr	r2, [pc, #688]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 800383e:	f023 0304 	bic.w	r3, r3, #4
 8003842:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003848:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8081 	beq.w	8003958 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7fd fca3 	bl	80011a0 <HAL_GetTick>
 800385a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fd fc9e 	bl	80011a0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e345      	b.n	8003f04 <HAL_RCC_OscConfig+0x106c>
 8003878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003880:	2202      	movs	r2, #2
 8003882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003888:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	fa93 f2a3 	rbit	r2, r3
 8003892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003896:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80038a4:	2202      	movs	r2, #2
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	fa93 f2a3 	rbit	r2, r3
 80038b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80038be:	601a      	str	r2, [r3, #0]
  return result;
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80038c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d102      	bne.n	80038e4 <HAL_RCC_OscConfig+0xa4c>
 80038de:	4b84      	ldr	r3, [pc, #528]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	e013      	b.n	800390c <HAL_RCC_OscConfig+0xa74>
 80038e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80038ec:	2202      	movs	r2, #2
 80038ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	fa93 f2a3 	rbit	r2, r3
 80038fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003902:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	4b79      	ldr	r3, [pc, #484]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003910:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003914:	2102      	movs	r1, #2
 8003916:	6011      	str	r1, [r2, #0]
 8003918:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800391c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	fa92 f1a2 	rbit	r1, r2
 8003926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800392a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800392e:	6011      	str	r1, [r2, #0]
  return result;
 8003930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003934:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	fab2 f282 	clz	r2, r2
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	f002 021f 	and.w	r2, r2, #31
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d084      	beq.n	8003860 <HAL_RCC_OscConfig+0x9c8>
 8003956:	e07f      	b.n	8003a58 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003958:	f7fd fc22 	bl	80011a0 <HAL_GetTick>
 800395c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003960:	e00b      	b.n	800397a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fd fc1d 	bl	80011a0 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e2c4      	b.n	8003f04 <HAL_RCC_OscConfig+0x106c>
 800397a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003982:	2202      	movs	r2, #2
 8003984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	fa93 f2a3 	rbit	r2, r3
 8003994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003998:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80039a6:	2202      	movs	r2, #2
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	fa93 f2a3 	rbit	r2, r3
 80039b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80039c0:	601a      	str	r2, [r3, #0]
  return result;
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80039ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f043 0302 	orr.w	r3, r3, #2
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d102      	bne.n	80039e6 <HAL_RCC_OscConfig+0xb4e>
 80039e0:	4b43      	ldr	r3, [pc, #268]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	e013      	b.n	8003a0e <HAL_RCC_OscConfig+0xb76>
 80039e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80039ee:	2202      	movs	r2, #2
 80039f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	fa93 f2a3 	rbit	r2, r3
 8003a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	4b39      	ldr	r3, [pc, #228]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003a16:	2102      	movs	r1, #2
 8003a18:	6011      	str	r1, [r2, #0]
 8003a1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	fa92 f1a2 	rbit	r1, r2
 8003a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003a30:	6011      	str	r1, [r2, #0]
  return result;
 8003a32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a36:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	fab2 f282 	clz	r2, r2
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	f002 021f 	and.w	r2, r2, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d184      	bne.n	8003962 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a58:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a60:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	4a22      	ldr	r2, [pc, #136]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 8003a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8242 	beq.w	8003f02 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a7e:	4b1c      	ldr	r3, [pc, #112]	; (8003af0 <HAL_RCC_OscConfig+0xc58>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	f000 8213 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	f040 8162 	bne.w	8003d62 <HAL_RCC_OscConfig+0xeca>
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ac2:	601a      	str	r2, [r3, #0]
  return result;
 8003ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003acc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fb5c 	bl	80011a0 <HAL_GetTick>
 8003ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aec:	e00c      	b.n	8003b08 <HAL_RCC_OscConfig+0xc70>
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd fb54 	bl	80011a0 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e1fd      	b.n	8003f04 <HAL_RCC_OscConfig+0x106c>
 8003b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b28:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003b2c:	601a      	str	r2, [r3, #0]
  return result;
 8003b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b32:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003b36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b38:	fab3 f383 	clz	r3, r3
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d102      	bne.n	8003b52 <HAL_RCC_OscConfig+0xcba>
 8003b4c:	4bb0      	ldr	r3, [pc, #704]	; (8003e10 <HAL_RCC_OscConfig+0xf78>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	e027      	b.n	8003ba2 <HAL_RCC_OscConfig+0xd0a>
 8003b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b56:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b64:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	fa93 f2a3 	rbit	r2, r3
 8003b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b72:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003b80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	fa93 f2a3 	rbit	r2, r3
 8003b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	4b9c      	ldr	r3, [pc, #624]	; (8003e10 <HAL_RCC_OscConfig+0xf78>)
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ba6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003baa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bae:	6011      	str	r1, [r2, #0]
 8003bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bb4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	fa92 f1a2 	rbit	r1, r2
 8003bbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003bc6:	6011      	str	r1, [r2, #0]
  return result;
 8003bc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bcc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	fab2 f282 	clz	r2, r2
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	f042 0220 	orr.w	r2, r2, #32
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f002 021f 	and.w	r2, r2, #31
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f202 	lsl.w	r2, r1, r2
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d182      	bne.n	8003af4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bee:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0xf78>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	497f      	ldr	r1, [pc, #508]	; (8003e10 <HAL_RCC_OscConfig+0xf78>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003c1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c28:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	fa93 f2a3 	rbit	r2, r3
 8003c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c36:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003c3a:	601a      	str	r2, [r3, #0]
  return result;
 8003c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c40:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003c44:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	461a      	mov	r2, r3
 8003c58:	2301      	movs	r3, #1
 8003c5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd faa0 	bl	80011a0 <HAL_GetTick>
 8003c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c64:	e009      	b.n	8003c7a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fd fa9b 	bl	80011a0 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e144      	b.n	8003f04 <HAL_RCC_OscConfig+0x106c>
 8003c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	fa93 f2a3 	rbit	r2, r3
 8003c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003c9e:	601a      	str	r2, [r3, #0]
  return result;
 8003ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ca8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xe2c>
 8003cbe:	4b54      	ldr	r3, [pc, #336]	; (8003e10 <HAL_RCC_OscConfig+0xf78>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	e027      	b.n	8003d14 <HAL_RCC_OscConfig+0xe7c>
 8003cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	fa93 f2a3 	rbit	r2, r3
 8003ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	fa93 f2a3 	rbit	r2, r3
 8003d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <HAL_RCC_OscConfig+0xf78>)
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d18:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003d1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d20:	6011      	str	r1, [r2, #0]
 8003d22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d26:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	fa92 f1a2 	rbit	r1, r2
 8003d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d34:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003d38:	6011      	str	r1, [r2, #0]
  return result;
 8003d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d3e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	fab2 f282 	clz	r2, r2
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	f042 0220 	orr.w	r2, r2, #32
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	f002 021f 	and.w	r2, r2, #31
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d082      	beq.n	8003c66 <HAL_RCC_OscConfig+0xdce>
 8003d60:	e0cf      	b.n	8003f02 <HAL_RCC_OscConfig+0x106a>
 8003d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d66:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003d6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	fa93 f2a3 	rbit	r2, r3
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003d86:	601a      	str	r2, [r3, #0]
  return result;
 8003d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003d90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	461a      	mov	r2, r3
 8003da4:	2300      	movs	r3, #0
 8003da6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fd f9fa 	bl	80011a0 <HAL_GetTick>
 8003dac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db0:	e009      	b.n	8003dc6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fd f9f5 	bl	80011a0 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e09e      	b.n	8003f04 <HAL_RCC_OscConfig+0x106c>
 8003dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003dce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	fa93 f2a3 	rbit	r2, r3
 8003de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003dea:	601a      	str	r2, [r3, #0]
  return result;
 8003dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003df4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d104      	bne.n	8003e14 <HAL_RCC_OscConfig+0xf7c>
 8003e0a:	4b01      	ldr	r3, [pc, #4]	; (8003e10 <HAL_RCC_OscConfig+0xf78>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	e029      	b.n	8003e64 <HAL_RCC_OscConfig+0xfcc>
 8003e10:	40021000 	.word	0x40021000
 8003e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e26:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	fa93 f2a3 	rbit	r2, r3
 8003e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e34:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	fa93 f2a3 	rbit	r2, r3
 8003e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_OscConfig+0x1078>)
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e68:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003e6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e70:	6011      	str	r1, [r2, #0]
 8003e72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e76:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	fa92 f1a2 	rbit	r1, r2
 8003e80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e84:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003e88:	6011      	str	r1, [r2, #0]
  return result;
 8003e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e8e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	fab2 f282 	clz	r2, r2
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	f042 0220 	orr.w	r2, r2, #32
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	f002 021f 	and.w	r2, r2, #31
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d180      	bne.n	8003db2 <HAL_RCC_OscConfig+0xf1a>
 8003eb0:	e027      	b.n	8003f02 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e01e      	b.n	8003f04 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_OscConfig+0x1078>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ece:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ed2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d10b      	bne.n	8003efe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ee6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003eea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000

08003f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b09e      	sub	sp, #120	; 0x78
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e162      	b.n	80041f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b90      	ldr	r3, [pc, #576]	; (8004170 <HAL_RCC_ClockConfig+0x25c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d910      	bls.n	8003f5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b8d      	ldr	r3, [pc, #564]	; (8004170 <HAL_RCC_ClockConfig+0x25c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 0207 	bic.w	r2, r3, #7
 8003f42:	498b      	ldr	r1, [pc, #556]	; (8004170 <HAL_RCC_ClockConfig+0x25c>)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4a:	4b89      	ldr	r3, [pc, #548]	; (8004170 <HAL_RCC_ClockConfig+0x25c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e14a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f68:	4b82      	ldr	r3, [pc, #520]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	497f      	ldr	r1, [pc, #508]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80dc 	beq.w	8004140 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d13c      	bne.n	800400a <HAL_RCC_ClockConfig+0xf6>
 8003f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <HAL_RCC_ClockConfig+0xa6>
 8003fb4:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	e00f      	b.n	8003fda <HAL_RCC_ClockConfig+0xc6>
 8003fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	667b      	str	r3, [r7, #100]	; 0x64
 8003fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd0:	fa93 f3a3 	rbit	r3, r3
 8003fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fd6:	4b67      	ldr	r3, [pc, #412]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fde:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fe2:	fa92 f2a2 	rbit	r2, r2
 8003fe6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003fe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fea:	fab2 f282 	clz	r2, r2
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	f042 0220 	orr.w	r2, r2, #32
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	f002 021f 	and.w	r2, r2, #31
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d17b      	bne.n	80040fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0f3      	b.n	80041f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d13c      	bne.n	800408c <HAL_RCC_ClockConfig+0x178>
 8004012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004016:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d102      	bne.n	800403c <HAL_RCC_ClockConfig+0x128>
 8004036:	4b4f      	ldr	r3, [pc, #316]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	e00f      	b.n	800405c <HAL_RCC_ClockConfig+0x148>
 800403c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004040:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	647b      	str	r3, [r7, #68]	; 0x44
 800404a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800404e:	643b      	str	r3, [r7, #64]	; 0x40
 8004050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004058:	4b46      	ldr	r3, [pc, #280]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004060:	63ba      	str	r2, [r7, #56]	; 0x38
 8004062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004064:	fa92 f2a2 	rbit	r2, r2
 8004068:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800406a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800406c:	fab2 f282 	clz	r2, r2
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	f042 0220 	orr.w	r2, r2, #32
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	f002 021f 	and.w	r2, r2, #31
 800407c:	2101      	movs	r1, #1
 800407e:	fa01 f202 	lsl.w	r2, r1, r2
 8004082:	4013      	ands	r3, r2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d13a      	bne.n	80040fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0b2      	b.n	80041f2 <HAL_RCC_ClockConfig+0x2de>
 800408c:	2302      	movs	r3, #2
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d102      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x1a0>
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	e00d      	b.n	80040d0 <HAL_RCC_ClockConfig+0x1bc>
 80040b4:	2302      	movs	r3, #2
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
 80040c0:	2302      	movs	r3, #2
 80040c2:	623b      	str	r3, [r7, #32]
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	4b29      	ldr	r3, [pc, #164]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	2202      	movs	r2, #2
 80040d2:	61ba      	str	r2, [r7, #24]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	fa92 f2a2 	rbit	r2, r2
 80040da:	617a      	str	r2, [r7, #20]
  return result;
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	fab2 f282 	clz	r2, r2
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	f042 0220 	orr.w	r2, r2, #32
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	f002 021f 	and.w	r2, r2, #31
 80040ee:	2101      	movs	r1, #1
 80040f0:	fa01 f202 	lsl.w	r2, r1, r2
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e079      	b.n	80041f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f023 0203 	bic.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	491a      	ldr	r1, [pc, #104]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004110:	f7fd f846 	bl	80011a0 <HAL_GetTick>
 8004114:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004118:	f7fd f842 	bl	80011a0 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e061      	b.n	80041f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <HAL_RCC_ClockConfig+0x260>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 020c 	and.w	r2, r3, #12
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d1eb      	bne.n	8004118 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_ClockConfig+0x25c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d214      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <HAL_RCC_ClockConfig+0x25c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 0207 	bic.w	r2, r3, #7
 8004156:	4906      	ldr	r1, [pc, #24]	; (8004170 <HAL_RCC_ClockConfig+0x25c>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <HAL_RCC_ClockConfig+0x25c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e040      	b.n	80041f2 <HAL_RCC_ClockConfig+0x2de>
 8004170:	40022000 	.word	0x40022000
 8004174:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004184:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_RCC_ClockConfig+0x2e8>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	491a      	ldr	r1, [pc, #104]	; (80041fc <HAL_RCC_ClockConfig+0x2e8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_RCC_ClockConfig+0x2e8>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4912      	ldr	r1, [pc, #72]	; (80041fc <HAL_RCC_ClockConfig+0x2e8>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80041b6:	f000 f829 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80041ba:	4601      	mov	r1, r0
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <HAL_RCC_ClockConfig+0x2e8>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c4:	22f0      	movs	r2, #240	; 0xf0
 80041c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	fa92 f2a2 	rbit	r2, r2
 80041ce:	60fa      	str	r2, [r7, #12]
  return result;
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	fab2 f282 	clz	r2, r2
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	40d3      	lsrs	r3, r2
 80041da:	4a09      	ldr	r2, [pc, #36]	; (8004200 <HAL_RCC_ClockConfig+0x2ec>)
 80041dc:	5cd3      	ldrb	r3, [r2, r3]
 80041de:	fa21 f303 	lsr.w	r3, r1, r3
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <HAL_RCC_ClockConfig+0x2f0>)
 80041e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <HAL_RCC_ClockConfig+0x2f4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fc ff94 	bl	8001118 <HAL_InitTick>
  
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3778      	adds	r7, #120	; 0x78
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	0800621c 	.word	0x0800621c
 8004204:	20000000 	.word	0x20000000
 8004208:	20000004 	.word	0x20000004

0800420c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800420c:	b480      	push	{r7}
 800420e:	b08b      	sub	sp, #44	; 0x2c
 8004210:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	2300      	movs	r3, #0
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004226:	4b29      	ldr	r3, [pc, #164]	; (80042cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b04      	cmp	r3, #4
 8004234:	d002      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x30>
 8004236:	2b08      	cmp	r3, #8
 8004238:	d003      	beq.n	8004242 <HAL_RCC_GetSysClockFreq+0x36>
 800423a:	e03c      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800423e:	623b      	str	r3, [r7, #32]
      break;
 8004240:	e03c      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004248:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800424c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	fa92 f2a2 	rbit	r2, r2
 8004254:	607a      	str	r2, [r7, #4]
  return result;
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	fab2 f282 	clz	r2, r2
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	40d3      	lsrs	r3, r2
 8004260:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004262:	5cd3      	ldrb	r3, [r2, r3]
 8004264:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004266:	4b19      	ldr	r3, [pc, #100]	; (80042cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	220f      	movs	r2, #15
 8004270:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	fa92 f2a2 	rbit	r2, r2
 8004278:	60fa      	str	r2, [r7, #12]
  return result;
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	fab2 f282 	clz	r2, r2
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	40d3      	lsrs	r3, r2
 8004284:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004286:	5cd3      	ldrb	r3, [r2, r3]
 8004288:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004294:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	fbb2 f2f3 	udiv	r2, r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	fb02 f303 	mul.w	r3, r2, r3
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
 80042a4:	e004      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4a0c      	ldr	r2, [pc, #48]	; (80042dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	623b      	str	r3, [r7, #32]
      break;
 80042b4:	e002      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042b8:	623b      	str	r3, [r7, #32]
      break;
 80042ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042bc:	6a3b      	ldr	r3, [r7, #32]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	372c      	adds	r7, #44	; 0x2c
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	007a1200 	.word	0x007a1200
 80042d4:	08006234 	.word	0x08006234
 80042d8:	08006244 	.word	0x08006244
 80042dc:	003d0900 	.word	0x003d0900

080042e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000000 	.word	0x20000000

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80042fe:	f7ff ffef 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004302:	4601      	mov	r1, r0
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800430c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004310:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	fa92 f2a2 	rbit	r2, r2
 8004318:	603a      	str	r2, [r7, #0]
  return result;
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	fab2 f282 	clz	r2, r2
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	40d3      	lsrs	r3, r2
 8004324:	4a04      	ldr	r2, [pc, #16]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004326:	5cd3      	ldrb	r3, [r2, r3]
 8004328:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40021000 	.word	0x40021000
 8004338:	0800622c 	.word	0x0800622c

0800433c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004342:	f7ff ffcd 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004346:	4601      	mov	r1, r0
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004350:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004354:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	fa92 f2a2 	rbit	r2, r2
 800435c:	603a      	str	r2, [r7, #0]
  return result;
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	fab2 f282 	clz	r2, r2
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	40d3      	lsrs	r3, r2
 8004368:	4a04      	ldr	r2, [pc, #16]	; (800437c <HAL_RCC_GetPCLK2Freq+0x40>)
 800436a:	5cd3      	ldrb	r3, [r2, r3]
 800436c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000
 800437c:	0800622c 	.word	0x0800622c

08004380 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b092      	sub	sp, #72	; 0x48
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004390:	2300      	movs	r3, #0
 8004392:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80cd 	beq.w	800453e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a4:	4b8e      	ldr	r3, [pc, #568]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10e      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b0:	4b8b      	ldr	r3, [pc, #556]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	4a8a      	ldr	r2, [pc, #552]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ba:	61d3      	str	r3, [r2, #28]
 80043bc:	4b88      	ldr	r3, [pc, #544]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ce:	4b85      	ldr	r3, [pc, #532]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d118      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043da:	4b82      	ldr	r3, [pc, #520]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a81      	ldr	r2, [pc, #516]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e6:	f7fc fedb 	bl	80011a0 <HAL_GetTick>
 80043ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ec:	e008      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ee:	f7fc fed7 	bl	80011a0 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b64      	cmp	r3, #100	; 0x64
 80043fa:	d901      	bls.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e0ea      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004400:	4b78      	ldr	r3, [pc, #480]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800440c:	4b74      	ldr	r3, [pc, #464]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004414:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d07d      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004426:	429a      	cmp	r2, r3
 8004428:	d076      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800442a:	4b6d      	ldr	r3, [pc, #436]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004438:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004444:	fab3 f383 	clz	r3, r3
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	4b66      	ldr	r3, [pc, #408]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	461a      	mov	r2, r3
 8004454:	2301      	movs	r3, #1
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800445c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004468:	fab3 f383 	clz	r3, r3
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	4b5d      	ldr	r3, [pc, #372]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	461a      	mov	r2, r3
 8004478:	2300      	movs	r3, #0
 800447a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800447c:	4a58      	ldr	r2, [pc, #352]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d045      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7fc fe88 	bl	80011a0 <HAL_GetTick>
 8004490:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004492:	e00a      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004494:	f7fc fe84 	bl	80011a0 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e095      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80044aa:	2302      	movs	r3, #2
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	2302      	movs	r3, #2
 80044b8:	623b      	str	r3, [r7, #32]
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	61fb      	str	r3, [r7, #28]
  return result;
 80044c2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f043 0302 	orr.w	r3, r3, #2
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d102      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80044d8:	4b41      	ldr	r3, [pc, #260]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	e007      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80044de:	2302      	movs	r3, #2
 80044e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	4b3d      	ldr	r3, [pc, #244]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2202      	movs	r2, #2
 80044f0:	613a      	str	r2, [r7, #16]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	fa92 f2a2 	rbit	r2, r2
 80044f8:	60fa      	str	r2, [r7, #12]
  return result;
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	fab2 f282 	clz	r2, r2
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	f002 021f 	and.w	r2, r2, #31
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f202 	lsl.w	r2, r1, r2
 8004512:	4013      	ands	r3, r2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0bd      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004518:	4b31      	ldr	r3, [pc, #196]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	492e      	ldr	r1, [pc, #184]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004526:	4313      	orrs	r3, r2
 8004528:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800452a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800452e:	2b01      	cmp	r3, #1
 8004530:	d105      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004532:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	4a2a      	ldr	r2, [pc, #168]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800454a:	4b25      	ldr	r3, [pc, #148]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	f023 0203 	bic.w	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	4922      	ldr	r1, [pc, #136]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004558:	4313      	orrs	r3, r2
 800455a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	f023 0210 	bic.w	r2, r3, #16
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	491a      	ldr	r1, [pc, #104]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	4313      	orrs	r3, r2
 8004578:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004586:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	4913      	ldr	r1, [pc, #76]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004594:	4313      	orrs	r3, r2
 8004596:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	490b      	ldr	r1, [pc, #44]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045c2:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	4904      	ldr	r1, [pc, #16]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3748      	adds	r7, #72	; 0x48
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40007000 	.word	0x40007000
 80045e8:	10908100 	.word	0x10908100

080045ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e049      	b.n	8004692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fbd8 	bl	8000dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f000 f9da 	bl	80049e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d001      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e040      	b.n	8004736 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <HAL_TIM_Base_Start_IT+0xa8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00e      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x58>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d009      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x58>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a18      	ldr	r2, [pc, #96]	; (8004748 <HAL_TIM_Base_Start_IT+0xac>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x58>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_TIM_Base_Start_IT+0xb0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d115      	bne.n	8004720 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	4b15      	ldr	r3, [pc, #84]	; (8004750 <HAL_TIM_Base_Start_IT+0xb4>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b06      	cmp	r3, #6
 8004704:	d015      	beq.n	8004732 <HAL_TIM_Base_Start_IT+0x96>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d011      	beq.n	8004732 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	e008      	b.n	8004732 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e000      	b.n	8004734 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004732:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40000400 	.word	0x40000400
 800474c:	40014000 	.word	0x40014000
 8004750:	00010007 	.word	0x00010007

08004754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b02      	cmp	r3, #2
 8004768:	d122      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d11b      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0202 	mvn.w	r2, #2
 8004780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f905 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8f7 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f908 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d122      	bne.n	8004804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d11b      	bne.n	8004804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0204 	mvn.w	r2, #4
 80047d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f8db 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 80047f0:	e005      	b.n	80047fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f8cd 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f8de 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b08      	cmp	r3, #8
 8004810:	d122      	bne.n	8004858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b08      	cmp	r3, #8
 800481e:	d11b      	bne.n	8004858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0208 	mvn.w	r2, #8
 8004828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2204      	movs	r2, #4
 800482e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f8b1 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8a3 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f8b4 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b10      	cmp	r3, #16
 8004864:	d122      	bne.n	80048ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b10      	cmp	r3, #16
 8004872:	d11b      	bne.n	80048ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0210 	mvn.w	r2, #16
 800487c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2208      	movs	r2, #8
 8004882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f887 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 8004898:	e005      	b.n	80048a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f879 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f88a 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d10e      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0201 	mvn.w	r2, #1
 80048d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc f804 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e2:	2b80      	cmp	r3, #128	; 0x80
 80048e4:	d10e      	bne.n	8004904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d107      	bne.n	8004904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f960 	bl	8004bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004912:	d10e      	bne.n	8004932 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491e:	2b80      	cmp	r3, #128	; 0x80
 8004920:	d107      	bne.n	8004932 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800492a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f953 	bl	8004bd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d10e      	bne.n	800495e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	d107      	bne.n	800495e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f838 	bl	80049ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b20      	cmp	r3, #32
 800496a:	d10e      	bne.n	800498a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b20      	cmp	r3, #32
 8004978:	d107      	bne.n	800498a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f06f 0220 	mvn.w	r2, #32
 8004982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f913 	bl	8004bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a32      	ldr	r2, [pc, #200]	; (8004ac0 <TIM_Base_SetConfig+0xdc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <TIM_Base_SetConfig+0x28>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0x28>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a2f      	ldr	r2, [pc, #188]	; (8004ac4 <TIM_Base_SetConfig+0xe0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d108      	bne.n	8004a1e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a27      	ldr	r2, [pc, #156]	; (8004ac0 <TIM_Base_SetConfig+0xdc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <TIM_Base_SetConfig+0x6a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2c:	d00f      	beq.n	8004a4e <TIM_Base_SetConfig+0x6a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a24      	ldr	r2, [pc, #144]	; (8004ac4 <TIM_Base_SetConfig+0xe0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <TIM_Base_SetConfig+0x6a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a23      	ldr	r2, [pc, #140]	; (8004ac8 <TIM_Base_SetConfig+0xe4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_Base_SetConfig+0x6a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a22      	ldr	r2, [pc, #136]	; (8004acc <TIM_Base_SetConfig+0xe8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_Base_SetConfig+0x6a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a21      	ldr	r2, [pc, #132]	; (8004ad0 <TIM_Base_SetConfig+0xec>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a0e      	ldr	r2, [pc, #56]	; (8004ac0 <TIM_Base_SetConfig+0xdc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00b      	beq.n	8004aa4 <TIM_Base_SetConfig+0xc0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <TIM_Base_SetConfig+0xe4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d007      	beq.n	8004aa4 <TIM_Base_SetConfig+0xc0>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <TIM_Base_SetConfig+0xe8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_Base_SetConfig+0xc0>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ad0 <TIM_Base_SetConfig+0xec>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d103      	bne.n	8004aac <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	615a      	str	r2, [r3, #20]
}
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800

08004ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e054      	b.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a24      	ldr	r2, [pc, #144]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d108      	bne.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00e      	beq.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d009      	beq.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a11      	ldr	r2, [pc, #68]	; (8004bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d10c      	bne.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40000400 	.word	0x40000400
 8004bac:	40014000 	.word	0x40014000

08004bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e040      	b.n	8004c80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fc f900 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2224      	movs	r2, #36	; 0x24
 8004c18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fbfc 	bl	8005428 <UART_SetConfig>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e022      	b.n	8004c80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fd26 	bl	8005694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fdad 	bl	80057d8 <UART_CheckIdleState>
 8004c7e:	4603      	mov	r3, r0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d132      	bne.n	8004d06 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_UART_Receive_IT+0x24>
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e02b      	b.n	8004d08 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d018      	beq.n	8004cf6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	69f9      	ldr	r1, [r7, #28]
 8004ce8:	6a3a      	ldr	r2, [r7, #32]
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e6      	bne.n	8004cc4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fe7b 	bl	80059f8 <UART_Start_Receive_IT>
 8004d02:	4603      	mov	r3, r0
 8004d04:	e000      	b.n	8004d08 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004d06:	2302      	movs	r3, #2
  }
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3728      	adds	r7, #40	; 0x28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d165      	bne.n	8004df2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_UART_Transmit_DMA+0x22>
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e05e      	b.n	8004df4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2221      	movs	r2, #33	; 0x21
 8004d58:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d027      	beq.n	8004db2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <HAL_UART_Transmit_DMA+0xec>)
 8004d68:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <HAL_UART_Transmit_DMA+0xf0>)
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	4a23      	ldr	r2, [pc, #140]	; (8004e04 <HAL_UART_Transmit_DMA+0xf4>)
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	2200      	movs	r2, #0
 8004d80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3328      	adds	r3, #40	; 0x28
 8004d92:	461a      	mov	r2, r3
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	f7fd fd2e 	bl	80027f6 <HAL_DMA_Start_IT>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2210      	movs	r2, #16
 8004da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e020      	b.n	8004df4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dda:	623a      	str	r2, [r7, #32]
 8004ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	69f9      	ldr	r1, [r7, #28]
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e5      	bne.n	8004dba <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3728      	adds	r7, #40	; 0x28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	08005c99 	.word	0x08005c99
 8004e00:	08005d2d 	.word	0x08005d2d
 8004e04:	08005d49 	.word	0x08005d49

08004e08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b0ba      	sub	sp, #232	; 0xe8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e32:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e36:	4013      	ands	r3, r2
 8004e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d115      	bne.n	8004e70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00f      	beq.n	8004e70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 82ab 	beq.w	80053bc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
      }
      return;
 8004e6e:	e2a5      	b.n	80053bc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8117 	beq.w	80050a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e8a:	4b85      	ldr	r3, [pc, #532]	; (80050a0 <HAL_UART_IRQHandler+0x298>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 810a 	beq.w	80050a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d011      	beq.n	8004ec4 <HAL_UART_IRQHandler+0xbc>
 8004ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eba:	f043 0201 	orr.w	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d011      	beq.n	8004ef4 <HAL_UART_IRQHandler+0xec>
 8004ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eea:	f043 0204 	orr.w	r2, r3, #4
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d011      	beq.n	8004f24 <HAL_UART_IRQHandler+0x11c>
 8004f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2204      	movs	r2, #4
 8004f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1a:	f043 0202 	orr.w	r2, r3, #2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d017      	beq.n	8004f60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00b      	beq.n	8004f60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f56:	f043 0208 	orr.w	r2, r3, #8
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d012      	beq.n	8004f92 <HAL_UART_IRQHandler+0x18a>
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00c      	beq.n	8004f92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f88:	f043 0220 	orr.w	r2, r3, #32
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8211 	beq.w	80053c0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00d      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	d005      	beq.n	8004fea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fe2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d04f      	beq.n	800508a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fdf0 	bl	8005bd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b40      	cmp	r3, #64	; 0x40
 8004ffc:	d141      	bne.n	8005082 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3308      	adds	r3, #8
 8005004:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3308      	adds	r3, #8
 8005026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800502a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800502e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1d9      	bne.n	8004ffe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504e:	2b00      	cmp	r3, #0
 8005050:	d013      	beq.n	800507a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005056:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <HAL_UART_IRQHandler+0x29c>)
 8005058:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505e:	4618      	mov	r0, r3
 8005060:	f7fd fc61 	bl	8002926 <HAL_DMA_Abort_IT>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d017      	beq.n	800509a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005074:	4610      	mov	r0, r2
 8005076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005078:	e00f      	b.n	800509a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f9be 	bl	80053fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005080:	e00b      	b.n	800509a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f9ba 	bl	80053fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	e007      	b.n	800509a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f9b6 	bl	80053fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005098:	e192      	b.n	80053c0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509a:	bf00      	nop
    return;
 800509c:	e190      	b.n	80053c0 <HAL_UART_IRQHandler+0x5b8>
 800509e:	bf00      	nop
 80050a0:	04000120 	.word	0x04000120
 80050a4:	08005dc7 	.word	0x08005dc7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	f040 814b 	bne.w	8005348 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8144 	beq.w	8005348 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 813d 	beq.w	8005348 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2210      	movs	r2, #16
 80050d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e0:	2b40      	cmp	r3, #64	; 0x40
 80050e2:	f040 80b5 	bne.w	8005250 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8164 	beq.w	80053c4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005106:	429a      	cmp	r2, r3
 8005108:	f080 815c 	bcs.w	80053c4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005112:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	2b20      	cmp	r3, #32
 800511e:	f000 8086 	beq.w	800522e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005136:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800513a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800514c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005150:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005158:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005164:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1da      	bne.n	8005122 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005176:	e853 3f00 	ldrex	r3, [r3]
 800517a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800517c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800517e:	f023 0301 	bic.w	r3, r3, #1
 8005182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005190:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005194:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005198:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e1      	bne.n	800516c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3308      	adds	r3, #8
 80051c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e3      	bne.n	80051a8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fe:	f023 0310 	bic.w	r3, r3, #16
 8005202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005210:	65bb      	str	r3, [r7, #88]	; 0x58
 8005212:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800521e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e4      	bne.n	80051ee <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005228:	4618      	mov	r0, r3
 800522a:	f7fd fb43 	bl	80028b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005240:	b29b      	uxth	r3, r3
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	b29b      	uxth	r3, r3
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f8e1 	bl	8005410 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800524e:	e0b9      	b.n	80053c4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800525c:	b29b      	uxth	r3, r3
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80ab 	beq.w	80053c8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005272:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80a6 	beq.w	80053c8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800528a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005290:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800529e:	647b      	str	r3, [r7, #68]	; 0x44
 80052a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e4      	bne.n	800527c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3308      	adds	r3, #8
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	623b      	str	r3, [r7, #32]
   return(result);
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052d6:	633a      	str	r2, [r7, #48]	; 0x30
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e3      	bne.n	80052b2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	60fb      	str	r3, [r7, #12]
   return(result);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0310 	bic.w	r3, r3, #16
 8005312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	69b9      	ldr	r1, [r7, #24]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	617b      	str	r3, [r7, #20]
   return(result);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e4      	bne.n	80052fe <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800533a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f865 	bl	8005410 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005346:	e03f      	b.n	80053c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00e      	beq.n	8005372 <HAL_UART_IRQHandler+0x56a>
 8005354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005368:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 ff13 	bl	8006196 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005370:	e02d      	b.n	80053ce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00e      	beq.n	800539c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800537e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01c      	beq.n	80053cc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	4798      	blx	r3
    }
    return;
 800539a:	e017      	b.n	80053cc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800539c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d012      	beq.n	80053ce <HAL_UART_IRQHandler+0x5c6>
 80053a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00c      	beq.n	80053ce <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fd1c 	bl	8005df2 <UART_EndTransmit_IT>
    return;
 80053ba:	e008      	b.n	80053ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80053bc:	bf00      	nop
 80053be:	e006      	b.n	80053ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80053c0:	bf00      	nop
 80053c2:	e004      	b.n	80053ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80053c4:	bf00      	nop
 80053c6:	e002      	b.n	80053ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80053c8:	bf00      	nop
 80053ca:	e000      	b.n	80053ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80053cc:	bf00      	nop
  }

}
 80053ce:	37e8      	adds	r7, #232	; 0xe8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b8a      	ldr	r3, [pc, #552]	; (800567c <UART_SetConfig+0x254>)
 8005454:	4013      	ands	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	430b      	orrs	r3, r1
 800545e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	430a      	orrs	r2, r1
 8005498:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a78      	ldr	r2, [pc, #480]	; (8005680 <UART_SetConfig+0x258>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d120      	bne.n	80054e6 <UART_SetConfig+0xbe>
 80054a4:	4b77      	ldr	r3, [pc, #476]	; (8005684 <UART_SetConfig+0x25c>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d817      	bhi.n	80054e0 <UART_SetConfig+0xb8>
 80054b0:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <UART_SetConfig+0x90>)
 80054b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	080054c9 	.word	0x080054c9
 80054bc:	080054d5 	.word	0x080054d5
 80054c0:	080054db 	.word	0x080054db
 80054c4:	080054cf 	.word	0x080054cf
 80054c8:	2300      	movs	r3, #0
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e01d      	b.n	800550a <UART_SetConfig+0xe2>
 80054ce:	2302      	movs	r3, #2
 80054d0:	77fb      	strb	r3, [r7, #31]
 80054d2:	e01a      	b.n	800550a <UART_SetConfig+0xe2>
 80054d4:	2304      	movs	r3, #4
 80054d6:	77fb      	strb	r3, [r7, #31]
 80054d8:	e017      	b.n	800550a <UART_SetConfig+0xe2>
 80054da:	2308      	movs	r3, #8
 80054dc:	77fb      	strb	r3, [r7, #31]
 80054de:	e014      	b.n	800550a <UART_SetConfig+0xe2>
 80054e0:	2310      	movs	r3, #16
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e011      	b.n	800550a <UART_SetConfig+0xe2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a67      	ldr	r2, [pc, #412]	; (8005688 <UART_SetConfig+0x260>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d102      	bne.n	80054f6 <UART_SetConfig+0xce>
 80054f0:	2300      	movs	r3, #0
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	e009      	b.n	800550a <UART_SetConfig+0xe2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a64      	ldr	r2, [pc, #400]	; (800568c <UART_SetConfig+0x264>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d102      	bne.n	8005506 <UART_SetConfig+0xde>
 8005500:	2300      	movs	r3, #0
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e001      	b.n	800550a <UART_SetConfig+0xe2>
 8005506:	2310      	movs	r3, #16
 8005508:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005512:	d15a      	bne.n	80055ca <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005514:	7ffb      	ldrb	r3, [r7, #31]
 8005516:	2b08      	cmp	r3, #8
 8005518:	d827      	bhi.n	800556a <UART_SetConfig+0x142>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0xf8>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005545 	.word	0x08005545
 8005524:	0800554d 	.word	0x0800554d
 8005528:	08005555 	.word	0x08005555
 800552c:	0800556b 	.word	0x0800556b
 8005530:	0800555b 	.word	0x0800555b
 8005534:	0800556b 	.word	0x0800556b
 8005538:	0800556b 	.word	0x0800556b
 800553c:	0800556b 	.word	0x0800556b
 8005540:	08005563 	.word	0x08005563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005544:	f7fe fed8 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8005548:	61b8      	str	r0, [r7, #24]
        break;
 800554a:	e013      	b.n	8005574 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800554c:	f7fe fef6 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 8005550:	61b8      	str	r0, [r7, #24]
        break;
 8005552:	e00f      	b.n	8005574 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005554:	4b4e      	ldr	r3, [pc, #312]	; (8005690 <UART_SetConfig+0x268>)
 8005556:	61bb      	str	r3, [r7, #24]
        break;
 8005558:	e00c      	b.n	8005574 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800555a:	f7fe fe57 	bl	800420c <HAL_RCC_GetSysClockFreq>
 800555e:	61b8      	str	r0, [r7, #24]
        break;
 8005560:	e008      	b.n	8005574 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005566:	61bb      	str	r3, [r7, #24]
        break;
 8005568:	e004      	b.n	8005574 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	77bb      	strb	r3, [r7, #30]
        break;
 8005572:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d074      	beq.n	8005664 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	005a      	lsls	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	441a      	add	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b0f      	cmp	r3, #15
 8005594:	d916      	bls.n	80055c4 <UART_SetConfig+0x19c>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559c:	d212      	bcs.n	80055c4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f023 030f 	bic.w	r3, r3, #15
 80055a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	89fb      	ldrh	r3, [r7, #14]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	89fa      	ldrh	r2, [r7, #14]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	e04f      	b.n	8005664 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	77bb      	strb	r3, [r7, #30]
 80055c8:	e04c      	b.n	8005664 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055ca:	7ffb      	ldrb	r3, [r7, #31]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d828      	bhi.n	8005622 <UART_SetConfig+0x1fa>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x1b0>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	08005605 	.word	0x08005605
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	08005623 	.word	0x08005623
 80055e8:	08005613 	.word	0x08005613
 80055ec:	08005623 	.word	0x08005623
 80055f0:	08005623 	.word	0x08005623
 80055f4:	08005623 	.word	0x08005623
 80055f8:	0800561b 	.word	0x0800561b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7fe fe7c 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8005600:	61b8      	str	r0, [r7, #24]
        break;
 8005602:	e013      	b.n	800562c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7fe fe9a 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 8005608:	61b8      	str	r0, [r7, #24]
        break;
 800560a:	e00f      	b.n	800562c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800560c:	4b20      	ldr	r3, [pc, #128]	; (8005690 <UART_SetConfig+0x268>)
 800560e:	61bb      	str	r3, [r7, #24]
        break;
 8005610:	e00c      	b.n	800562c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005612:	f7fe fdfb 	bl	800420c <HAL_RCC_GetSysClockFreq>
 8005616:	61b8      	str	r0, [r7, #24]
        break;
 8005618:	e008      	b.n	800562c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561e:	61bb      	str	r3, [r7, #24]
        break;
 8005620:	e004      	b.n	800562c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	77bb      	strb	r3, [r7, #30]
        break;
 800562a:	bf00      	nop
    }

    if (pclk != 0U)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d018      	beq.n	8005664 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	085a      	lsrs	r2, r3, #1
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	441a      	add	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b0f      	cmp	r3, #15
 800564a:	d909      	bls.n	8005660 <UART_SetConfig+0x238>
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005652:	d205      	bcs.n	8005660 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	b29a      	uxth	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60da      	str	r2, [r3, #12]
 800565e:	e001      	b.n	8005664 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005670:	7fbb      	ldrb	r3, [r7, #30]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	efff69f3 	.word	0xefff69f3
 8005680:	40013800 	.word	0x40013800
 8005684:	40021000 	.word	0x40021000
 8005688:	40004400 	.word	0x40004400
 800568c:	40004800 	.word	0x40004800
 8005690:	007a1200 	.word	0x007a1200

08005694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01a      	beq.n	80057aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005792:	d10a      	bne.n	80057aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	605a      	str	r2, [r3, #4]
  }
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b098      	sub	sp, #96	; 0x60
 80057dc:	af02      	add	r7, sp, #8
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057e8:	f7fb fcda 	bl	80011a0 <HAL_GetTick>
 80057ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0308 	and.w	r3, r3, #8
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d12e      	bne.n	800585a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005804:	2200      	movs	r2, #0
 8005806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f88c 	bl	8005928 <UART_WaitOnFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d021      	beq.n	800585a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582a:	653b      	str	r3, [r7, #80]	; 0x50
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005834:	647b      	str	r3, [r7, #68]	; 0x44
 8005836:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800583a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e6      	bne.n	8005816 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e062      	b.n	8005920 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b04      	cmp	r3, #4
 8005866:	d149      	bne.n	80058fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005870:	2200      	movs	r2, #0
 8005872:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f856 	bl	8005928 <UART_WaitOnFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d03c      	beq.n	80058fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	623b      	str	r3, [r7, #32]
   return(result);
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a0:	633b      	str	r3, [r7, #48]	; 0x30
 80058a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e6      	bne.n	8005882 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3308      	adds	r3, #8
 80058ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058d4:	61fa      	str	r2, [r7, #28]
 80058d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	69b9      	ldr	r1, [r7, #24]
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	617b      	str	r3, [r7, #20]
   return(result);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e5      	bne.n	80058b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e011      	b.n	8005920 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3758      	adds	r7, #88	; 0x58
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	4613      	mov	r3, r2
 8005936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005938:	e049      	b.n	80059ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d045      	beq.n	80059ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005942:	f7fb fc2d 	bl	80011a0 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	429a      	cmp	r2, r3
 8005950:	d302      	bcc.n	8005958 <UART_WaitOnFlagUntilTimeout+0x30>
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e048      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	d031      	beq.n	80059ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b08      	cmp	r3, #8
 8005976:	d110      	bne.n	800599a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2208      	movs	r2, #8
 800597e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f925 	bl	8005bd0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2208      	movs	r2, #8
 800598a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e029      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a8:	d111      	bne.n	80059ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f90b 	bl	8005bd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e00f      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4013      	ands	r3, r2
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	429a      	cmp	r2, r3
 80059dc:	bf0c      	ite	eq
 80059de:	2301      	moveq	r3, #1
 80059e0:	2300      	movne	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d0a6      	beq.n	800593a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b097      	sub	sp, #92	; 0x5c
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	88fa      	ldrh	r2, [r7, #6]
 8005a18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2a:	d10e      	bne.n	8005a4a <UART_Start_Receive_IT+0x52>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d105      	bne.n	8005a40 <UART_Start_Receive_IT+0x48>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a3e:	e02d      	b.n	8005a9c <UART_Start_Receive_IT+0xa4>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	22ff      	movs	r2, #255	; 0xff
 8005a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a48:	e028      	b.n	8005a9c <UART_Start_Receive_IT+0xa4>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10d      	bne.n	8005a6e <UART_Start_Receive_IT+0x76>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d104      	bne.n	8005a64 <UART_Start_Receive_IT+0x6c>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	22ff      	movs	r2, #255	; 0xff
 8005a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a62:	e01b      	b.n	8005a9c <UART_Start_Receive_IT+0xa4>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	227f      	movs	r2, #127	; 0x7f
 8005a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a6c:	e016      	b.n	8005a9c <UART_Start_Receive_IT+0xa4>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a76:	d10d      	bne.n	8005a94 <UART_Start_Receive_IT+0x9c>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <UART_Start_Receive_IT+0x92>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	227f      	movs	r2, #127	; 0x7f
 8005a84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a88:	e008      	b.n	8005a9c <UART_Start_Receive_IT+0xa4>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	223f      	movs	r2, #63	; 0x3f
 8005a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a92:	e003      	b.n	8005a9c <UART_Start_Receive_IT+0xa4>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2222      	movs	r2, #34	; 0x22
 8005aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005acc:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ace:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e5      	bne.n	8005aac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae8:	d107      	bne.n	8005afa <UART_Start_Receive_IT+0x102>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <UART_Start_Receive_IT+0x184>)
 8005af6:	669a      	str	r2, [r3, #104]	; 0x68
 8005af8:	e002      	b.n	8005b00 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4a20      	ldr	r2, [pc, #128]	; (8005b80 <UART_Start_Receive_IT+0x188>)
 8005afe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d019      	beq.n	8005b3c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
 8005b28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e6      	bne.n	8005b08 <UART_Start_Receive_IT+0x110>
 8005b3a:	e018      	b.n	8005b6e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f043 0320 	orr.w	r3, r3, #32
 8005b50:	653b      	str	r3, [r7, #80]	; 0x50
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b5a:	623b      	str	r3, [r7, #32]
 8005b5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	69f9      	ldr	r1, [r7, #28]
 8005b60:	6a3a      	ldr	r2, [r7, #32]
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	375c      	adds	r7, #92	; 0x5c
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	08005fef 	.word	0x08005fef
 8005b80:	08005e47 	.word	0x08005e47

08005b84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6979      	ldr	r1, [r7, #20]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e6      	bne.n	8005b8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005bc4:	bf00      	nop
 8005bc6:	3724      	adds	r7, #36	; 0x24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b095      	sub	sp, #84	; 0x54
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e6      	bne.n	8005bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f023 0301 	bic.w	r3, r3, #1
 8005c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3308      	adds	r3, #8
 8005c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e5      	bne.n	8005c0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d118      	bne.n	8005c78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f023 0310 	bic.w	r3, r3, #16
 8005c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6979      	ldr	r1, [r7, #20]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	613b      	str	r3, [r7, #16]
   return(result);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e6      	bne.n	8005c46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c8c:	bf00      	nop
 8005c8e:	3754      	adds	r7, #84	; 0x54
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b090      	sub	sp, #64	; 0x40
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	d037      	beq.n	8005d1e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3308      	adds	r3, #8
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ccc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cd6:	633a      	str	r2, [r7, #48]	; 0x30
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e5      	bne.n	8005cb6 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	69b9      	ldr	r1, [r7, #24]
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	617b      	str	r3, [r7, #20]
   return(result);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e6      	bne.n	8005cea <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d1c:	e002      	b.n	8005d24 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8005d1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005d20:	f7ff fb58 	bl	80053d4 <HAL_UART_TxCpltCallback>
}
 8005d24:	bf00      	nop
 8005d26:	3740      	adds	r7, #64	; 0x40
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7ff fb54 	bl	80053e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6e:	2b80      	cmp	r3, #128	; 0x80
 8005d70:	d109      	bne.n	8005d86 <UART_DMAError+0x3e>
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b21      	cmp	r3, #33	; 0x21
 8005d76:	d106      	bne.n	8005d86 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005d80:	6978      	ldr	r0, [r7, #20]
 8005d82:	f7ff feff 	bl	8005b84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b40      	cmp	r3, #64	; 0x40
 8005d92:	d109      	bne.n	8005da8 <UART_DMAError+0x60>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b22      	cmp	r3, #34	; 0x22
 8005d98:	d106      	bne.n	8005da8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005da2:	6978      	ldr	r0, [r7, #20]
 8005da4:	f7ff ff14 	bl	8005bd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dae:	f043 0210 	orr.w	r2, r3, #16
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005db8:	6978      	ldr	r0, [r7, #20]
 8005dba:	f7ff fb1f 	bl	80053fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dbe:	bf00      	nop
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff fb09 	bl	80053fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b088      	sub	sp, #32
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	6979      	ldr	r1, [r7, #20]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	613b      	str	r3, [r7, #16]
   return(result);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e6      	bne.n	8005dfa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff facb 	bl	80053d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e3e:	bf00      	nop
 8005e40:	3720      	adds	r7, #32
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b09c      	sub	sp, #112	; 0x70
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e54:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e5e:	2b22      	cmp	r3, #34	; 0x22
 8005e60:	f040 80b9 	bne.w	8005fd6 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e6a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e72:	b2d9      	uxtb	r1, r3
 8005e74:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7e:	400a      	ands	r2, r1
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f040 809c 	bne.w	8005fe6 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ec2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ece:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ed2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e6      	bne.n	8005eae <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
 8005ef6:	667b      	str	r3, [r7, #100]	; 0x64
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3308      	adds	r3, #8
 8005efe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f00:	647a      	str	r2, [r7, #68]	; 0x44
 8005f02:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e5      	bne.n	8005ee0 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d018      	beq.n	8005f68 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	623b      	str	r3, [r7, #32]
   return(result);
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f54:	633b      	str	r3, [r7, #48]	; 0x30
 8005f56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e6      	bne.n	8005f36 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d12e      	bne.n	8005fce <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0310 	bic.w	r3, r3, #16
 8005f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	69b9      	ldr	r1, [r7, #24]
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e6      	bne.n	8005f76 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d103      	bne.n	8005fbe <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2210      	movs	r2, #16
 8005fbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fa22 	bl	8005410 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fcc:	e00b      	b.n	8005fe6 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fa fdc8 	bl	8000b64 <HAL_UART_RxCpltCallback>
}
 8005fd4:	e007      	b.n	8005fe6 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0208 	orr.w	r2, r2, #8
 8005fe4:	619a      	str	r2, [r3, #24]
}
 8005fe6:	bf00      	nop
 8005fe8:	3770      	adds	r7, #112	; 0x70
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b09c      	sub	sp, #112	; 0x70
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ffc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006006:	2b22      	cmp	r3, #34	; 0x22
 8006008:	f040 80b9 	bne.w	800617e <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006012:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601a:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800601c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006020:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006024:	4013      	ands	r3, r2
 8006026:	b29a      	uxth	r2, r3
 8006028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800602a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	1c9a      	adds	r2, r3, #2
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 809c 	bne.w	800618e <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006066:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800606a:	667b      	str	r3, [r7, #100]	; 0x64
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006074:	657b      	str	r3, [r7, #84]	; 0x54
 8006076:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800607a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e6      	bne.n	8006056 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	f023 0301 	bic.w	r3, r3, #1
 800609e:	663b      	str	r3, [r7, #96]	; 0x60
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3308      	adds	r3, #8
 80060a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060a8:	643a      	str	r2, [r7, #64]	; 0x40
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e5      	bne.n	8006088 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d018      	beq.n	8006110 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006114:	2b01      	cmp	r3, #1
 8006116:	d12e      	bne.n	8006176 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	60bb      	str	r3, [r7, #8]
   return(result);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f023 0310 	bic.w	r3, r3, #16
 8006132:	65bb      	str	r3, [r7, #88]	; 0x58
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6979      	ldr	r1, [r7, #20]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	613b      	str	r3, [r7, #16]
   return(result);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e6      	bne.n	800611e <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	2b10      	cmp	r3, #16
 800615c:	d103      	bne.n	8006166 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2210      	movs	r2, #16
 8006164:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff f94e 	bl	8005410 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006174:	e00b      	b.n	800618e <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fa fcf4 	bl	8000b64 <HAL_UART_RxCpltCallback>
}
 800617c:	e007      	b.n	800618e <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0208 	orr.w	r2, r2, #8
 800618c:	619a      	str	r2, [r3, #24]
}
 800618e:	bf00      	nop
 8006190:	3770      	adds	r7, #112	; 0x70
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <memset>:
 80061aa:	4402      	add	r2, r0
 80061ac:	4603      	mov	r3, r0
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d100      	bne.n	80061b4 <memset+0xa>
 80061b2:	4770      	bx	lr
 80061b4:	f803 1b01 	strb.w	r1, [r3], #1
 80061b8:	e7f9      	b.n	80061ae <memset+0x4>
	...

080061bc <__libc_init_array>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	4d0d      	ldr	r5, [pc, #52]	; (80061f4 <__libc_init_array+0x38>)
 80061c0:	4c0d      	ldr	r4, [pc, #52]	; (80061f8 <__libc_init_array+0x3c>)
 80061c2:	1b64      	subs	r4, r4, r5
 80061c4:	10a4      	asrs	r4, r4, #2
 80061c6:	2600      	movs	r6, #0
 80061c8:	42a6      	cmp	r6, r4
 80061ca:	d109      	bne.n	80061e0 <__libc_init_array+0x24>
 80061cc:	4d0b      	ldr	r5, [pc, #44]	; (80061fc <__libc_init_array+0x40>)
 80061ce:	4c0c      	ldr	r4, [pc, #48]	; (8006200 <__libc_init_array+0x44>)
 80061d0:	f000 f818 	bl	8006204 <_init>
 80061d4:	1b64      	subs	r4, r4, r5
 80061d6:	10a4      	asrs	r4, r4, #2
 80061d8:	2600      	movs	r6, #0
 80061da:	42a6      	cmp	r6, r4
 80061dc:	d105      	bne.n	80061ea <__libc_init_array+0x2e>
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e4:	4798      	blx	r3
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7ee      	b.n	80061c8 <__libc_init_array+0xc>
 80061ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ee:	4798      	blx	r3
 80061f0:	3601      	adds	r6, #1
 80061f2:	e7f2      	b.n	80061da <__libc_init_array+0x1e>
 80061f4:	08006254 	.word	0x08006254
 80061f8:	08006254 	.word	0x08006254
 80061fc:	08006254 	.word	0x08006254
 8006200:	08006258 	.word	0x08006258

08006204 <_init>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr

08006210 <_fini>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr
